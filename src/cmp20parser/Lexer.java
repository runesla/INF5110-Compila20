/* The following code was generated by JFlex 1.4.3 on 3/5/20 8:51 AM */

package cmp20parser;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/5/20 8:51 AM from the specification file
 * <tt>/uio/hume/student-u45/runesla/workspace/compila09/src/grammars/compila.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\3\1\1\16\11\4\0\1\3\1\0"+
    "\1\56\1\0\1\10\1\0\1\54\1\0\1\5\1\7\1\6\1\44"+
    "\1\43\1\45\1\14\1\4\1\12\11\13\1\47\1\53\1\51\1\50"+
    "\1\52\2\0\32\10\3\0\1\46\1\10\1\0\1\21\1\26\1\23"+
    "\1\32\1\27\1\37\1\20\1\36\1\30\2\10\1\24\1\22\1\31"+
    "\1\17\1\15\1\10\1\16\1\25\1\35\1\33\1\34\1\40\3\10"+
    "\1\41\1\55\1\42\1\0\41\11\2\0\4\10\4\0\1\10\2\0"+
    "\1\11\7\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0"+
    "\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\21\0"+
    "\160\11\5\10\1\0\2\10\2\0\4\10\10\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\1\0\5\11"+
    "\2\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\7\0\1\10"+
    "\1\0\55\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\10\0\33\10\5\0\3\10\15\0\5\11\6\0\1\10\4\0\13\11"+
    "\5\0\53\10\37\11\4\0\2\10\1\11\143\10\1\0\1\10\10\11"+
    "\1\0\6\11\2\10\2\11\1\0\4\11\2\10\12\11\3\10\2\0"+
    "\1\10\17\0\1\11\1\10\1\11\36\10\33\11\2\0\131\10\13\11"+
    "\1\10\16\0\12\11\41\10\11\11\2\10\4\0\1\10\5\0\26\10"+
    "\4\11\1\10\11\11\1\10\3\11\1\10\5\11\22\0\31\10\3\11"+
    "\104\0\1\10\1\0\13\10\67\0\33\11\1\0\4\11\66\10\3\11"+
    "\1\10\22\11\1\10\7\11\12\10\2\11\2\0\12\11\1\0\7\10"+
    "\1\0\7\10\1\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\1\10\3\0\4\10\2\0\1\11\1\10\7\11"+
    "\2\0\2\11\2\0\3\11\1\10\10\0\1\11\4\0\2\10\1\0"+
    "\3\10\2\11\2\0\12\11\4\10\7\0\1\10\5\0\3\11\1\0"+
    "\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0\2\11\2\0"+
    "\3\11\3\0\1\11\7\0\4\10\1\0\1\10\7\0\14\11\3\10"+
    "\1\11\13\0\3\11\1\0\11\10\1\0\3\10\1\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\10\11\1\0"+
    "\3\11\1\0\3\11\2\0\1\10\17\0\2\10\2\11\2\0\12\11"+
    "\1\0\1\10\17\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\7\11"+
    "\2\0\2\11\2\0\3\11\10\0\2\11\4\0\2\10\1\0\3\10"+
    "\2\11\2\0\12\11\1\0\1\10\20\0\1\11\1\10\1\0\6\10"+
    "\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10"+
    "\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\11\3\0\3\11"+
    "\1\0\4\11\2\0\1\10\6\0\1\11\16\0\12\11\11\0\1\10"+
    "\7\0\3\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10"+
    "\1\0\5\10\3\0\1\10\7\11\1\0\3\11\1\0\4\11\7\0"+
    "\2\11\1\0\2\10\6\0\2\10\2\11\2\0\12\11\22\0\2\11"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\2\0\1\11\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\7\0\1\10\1\0\2\10\2\11\2\0\12\11\1\0\2\10\17\0"+
    "\2\11\1\0\10\10\1\0\3\10\1\0\51\10\2\0\1\10\7\11"+
    "\1\0\3\11\1\0\4\11\1\10\10\0\1\11\10\0\2\10\2\11"+
    "\2\0\12\11\12\0\6\10\2\0\2\11\1\0\22\10\3\0\30\10"+
    "\1\0\11\10\1\0\1\10\2\0\7\10\3\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\0\10\11\22\0\2\11\15\0\60\10\1\11\2\10"+
    "\7\11\4\0\10\10\10\11\1\0\12\11\47\0\2\10\1\0\1\10"+
    "\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10"+
    "\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10"+
    "\1\11\2\10\6\11\1\0\2\11\1\10\2\0\5\10\1\0\1\10"+
    "\1\0\6\11\2\0\12\11\2\0\4\10\40\0\1\10\27\0\2\11"+
    "\6\0\12\11\13\0\1\11\1\0\1\11\1\0\1\11\4\0\2\11"+
    "\10\10\1\0\44\10\4\0\24\11\1\0\2\11\5\10\13\11\1\0"+
    "\44\11\11\0\1\11\71\0\53\10\24\11\1\10\12\11\6\0\6\10"+
    "\4\11\4\10\3\11\1\10\3\11\2\10\7\11\3\10\4\11\15\10"+
    "\14\11\1\10\17\11\2\0\46\10\1\0\1\10\5\0\1\10\2\0"+
    "\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0"+
    "\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10\1\0"+
    "\4\10\2\0\103\10\2\0\3\11\40\0\20\10\20\0\125\10\14\0"+
    "\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10\17\0"+
    "\15\10\1\0\4\10\3\11\13\0\22\10\3\11\13\0\22\10\2\11"+
    "\14\0\15\10\1\0\3\10\1\0\2\11\14\0\64\10\40\11\3\0"+
    "\1\10\3\0\2\10\1\11\2\0\12\11\41\0\3\11\2\0\12\11"+
    "\6\0\130\10\10\0\51\10\1\11\1\10\5\0\106\10\12\0\35\10"+
    "\3\0\14\11\4\0\14\11\12\0\12\11\36\10\2\0\5\10\13\0"+
    "\54\10\4\0\21\11\7\10\2\11\6\0\12\11\46\0\27\10\5\11"+
    "\4\0\65\10\12\11\1\0\35\11\2\0\13\11\6\0\12\11\15\0"+
    "\1\10\130\0\5\11\57\10\21\11\7\10\4\0\12\11\21\0\11\11"+
    "\14\0\3\11\36\10\15\11\2\10\12\11\54\10\16\11\14\0\44\10"+
    "\24\11\10\0\12\11\3\0\3\10\12\11\44\10\122\0\3\11\1\0"+
    "\25\11\4\10\1\11\4\10\3\11\2\10\11\0\300\10\47\11\25\0"+
    "\4\11\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10"+
    "\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10"+
    "\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\16\0\5\11"+
    "\32\0\5\11\20\0\2\10\23\0\1\10\13\0\5\11\5\0\6\11"+
    "\1\0\1\10\15\0\1\10\20\0\15\10\3\0\33\10\25\0\15\11"+
    "\4\0\1\11\3\0\14\11\21\0\1\10\4\0\1\10\2\0\12\10"+
    "\1\0\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10"+
    "\21\0\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10"+
    "\3\11\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\17\0\1\11\27\10\11\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11"+
    "\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10"+
    "\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0\33\10"+
    "\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0\56\10"+
    "\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\1\11\4\0"+
    "\12\11\1\0\31\10\7\0\1\11\120\10\2\11\45\0\11\10\2\0"+
    "\147\10\2\0\4\10\1\0\4\10\14\0\13\10\115\0\12\10\1\11"+
    "\3\10\1\11\4\10\1\11\27\10\5\11\20\0\1\10\7\0\64\10"+
    "\14\0\2\11\62\10\21\11\13\0\12\11\6\0\22\11\6\10\3\0"+
    "\1\10\4\0\12\11\34\10\10\11\2\0\27\10\15\11\14\0\35\10"+
    "\3\0\4\11\57\10\16\11\16\0\1\10\12\11\46\0\51\10\16\11"+
    "\11\0\3\10\1\11\10\10\2\11\2\0\12\11\6\0\27\10\3\0"+
    "\1\10\1\11\4\0\60\10\1\11\1\10\3\11\2\10\2\11\5\10"+
    "\2\11\1\10\1\11\1\10\30\0\3\10\2\0\13\10\5\11\2\0"+
    "\3\10\2\11\12\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10"+
    "\1\0\7\10\221\0\43\10\10\11\1\0\2\11\2\0\12\11\6\0"+
    "\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0"+
    "\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0\15\10\1\0"+
    "\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0"+
    "\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\11\20\0"+
    "\7\11\14\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0"+
    "\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0\32\10\4\0"+
    "\1\10\1\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0"+
    "\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\11\16\7\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\1\1\25"+
    "\2\26\1\27\3\0\2\7\1\30\6\7\1\31\1\32"+
    "\3\7\1\33\6\7\1\34\1\7\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\0\2\43\2\7\1\44\5\7"+
    "\1\45\1\46\1\47\1\50\2\7\1\51\5\7\1\0"+
    "\6\7\1\52\1\7\1\53\1\54\1\7\1\55\1\56"+
    "\6\7\1\57\2\7\1\60\1\61\1\62\1\63\1\64"+
    "\2\7\1\65\1\66\1\67\1\70\2\7\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\136\0\274\0\353\0\136"+
    "\0\136\0\u011a\0\u0149\0\u0178\0\136\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\136\0\136\0\136\0\136\0\136"+
    "\0\136\0\u0439\0\136\0\u0468\0\u0497\0\136\0\u04c6\0\u04f5"+
    "\0\136\0\u0524\0\136\0\136\0\u0553\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u011a\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u011a\0\u0787\0\u07b6\0\u07e5\0\u011a\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u011a\0\u092e\0\136\0\136"+
    "\0\136\0\136\0\136\0\136\0\u095d\0\136\0\u098c\0\u09bb"+
    "\0\u09ea\0\u011a\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u011a"+
    "\0\u011a\0\u011a\0\u011a\0\u0b04\0\u0b33\0\u011a\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u011a\0\u0d96\0\u011a\0\u011a\0\u0dc5\0\u011a"+
    "\0\u011a\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u011a"+
    "\0\u0f0e\0\u0f3d\0\u011a\0\u011a\0\u011a\0\u011a\0\u011a\0\u0f6c"+
    "\0\u0f9b\0\u011a\0\u011a\0\u011a\0\u011a\0\u0fca\0\u0ff9\0\u011a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\13\1\14\1\15\1\16\1\17\1\20\3\12"+
    "\1\21\1\12\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\12\1\30\1\31\1\12\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\3\1\52\1\53\53\3"+
    "\1\54\61\0\1\5\60\0\1\55\60\0\1\56\60\0"+
    "\4\12\1\0\24\12\32\0\1\57\54\0\2\14\1\57"+
    "\52\0\4\12\1\0\1\12\1\60\22\12\26\0\4\12"+
    "\1\0\12\12\1\61\11\12\26\0\4\12\1\0\15\12"+
    "\1\62\6\12\26\0\4\12\1\0\7\12\1\63\14\12"+
    "\26\0\4\12\1\0\20\12\1\64\3\12\26\0\4\12"+
    "\1\0\2\12\1\65\7\12\1\66\11\12\26\0\4\12"+
    "\1\0\7\12\1\67\4\12\1\70\7\12\26\0\4\12"+
    "\1\0\14\12\1\71\5\12\1\72\1\12\26\0\4\12"+
    "\1\0\2\12\1\73\7\12\1\74\3\12\1\75\5\12"+
    "\26\0\4\12\1\0\2\12\1\76\7\12\1\77\11\12"+
    "\26\0\4\12\1\0\4\12\1\100\17\12\26\0\4\12"+
    "\1\0\1\12\1\101\17\12\1\102\2\12\26\0\4\12"+
    "\1\0\4\12\1\103\2\12\1\104\3\12\1\105\10\12"+
    "\26\0\4\12\1\0\21\12\1\106\2\12\66\0\1\107"+
    "\56\0\1\110\1\0\1\111\54\0\1\112\62\0\1\113"+
    "\57\0\1\114\3\0\1\53\54\0\1\55\1\4\1\5"+
    "\54\55\6\115\1\0\50\115\12\0\1\116\1\117\53\0"+
    "\4\12\1\0\2\12\1\120\21\12\26\0\4\12\1\0"+
    "\20\12\1\121\1\12\1\122\1\12\26\0\4\12\1\0"+
    "\4\12\1\123\17\12\26\0\4\12\1\0\1\12\1\124"+
    "\22\12\26\0\4\12\1\0\2\12\1\125\21\12\26\0"+
    "\4\12\1\0\3\12\1\126\20\12\26\0\4\12\1\0"+
    "\10\12\1\127\13\12\26\0\4\12\1\0\15\12\1\130"+
    "\6\12\26\0\4\12\1\0\20\12\1\131\3\12\26\0"+
    "\4\12\1\0\20\12\1\132\3\12\26\0\4\12\1\0"+
    "\23\12\1\133\26\0\4\12\1\0\7\12\1\134\14\12"+
    "\26\0\4\12\1\0\1\12\1\135\22\12\26\0\4\12"+
    "\1\0\1\12\1\136\22\12\26\0\4\12\1\0\16\12"+
    "\1\137\5\12\26\0\4\12\1\0\12\12\1\140\11\12"+
    "\26\0\4\12\1\0\7\12\1\141\14\12\26\0\4\12"+
    "\1\0\2\12\1\142\21\12\26\0\4\12\1\0\13\12"+
    "\1\143\10\12\16\0\6\115\1\144\50\115\12\0\2\117"+
    "\53\0\4\12\1\0\3\12\1\145\2\12\1\146\15\12"+
    "\26\0\4\12\1\0\16\12\1\147\5\12\26\0\4\12"+
    "\1\0\10\12\1\150\13\12\26\0\4\12\1\0\13\12"+
    "\1\151\2\12\1\152\5\12\26\0\4\12\1\0\7\12"+
    "\1\153\14\12\26\0\4\12\1\0\13\12\1\154\10\12"+
    "\26\0\4\12\1\0\12\12\1\155\11\12\26\0\4\12"+
    "\1\0\7\12\1\156\14\12\26\0\4\12\1\0\12\12"+
    "\1\157\11\12\26\0\4\12\1\0\12\12\1\160\11\12"+
    "\26\0\4\12\1\0\14\12\1\161\7\12\26\0\4\12"+
    "\1\0\10\12\1\162\13\12\26\0\4\12\1\0\4\12"+
    "\1\163\17\12\26\0\4\12\1\0\7\12\1\164\14\12"+
    "\16\0\6\115\1\144\1\5\47\115\10\0\4\12\1\0"+
    "\1\12\1\165\22\12\26\0\4\12\1\0\12\12\1\166"+
    "\11\12\26\0\4\12\1\0\1\12\1\167\22\12\26\0"+
    "\4\12\1\0\10\12\1\170\13\12\26\0\4\12\1\0"+
    "\14\12\1\171\7\12\26\0\4\12\1\0\6\12\1\172"+
    "\15\12\26\0\4\12\1\0\14\12\1\173\7\12\26\0"+
    "\4\12\1\0\22\12\1\174\1\12\26\0\4\12\1\0"+
    "\12\12\1\175\11\12\26\0\4\12\1\0\20\12\1\176"+
    "\3\12\26\0\4\12\1\0\12\12\1\177\11\12\26\0"+
    "\4\12\1\0\4\12\1\200\17\12\26\0\4\12\1\0"+
    "\15\12\1\201\6\12\26\0\4\12\1\0\14\12\1\202"+
    "\7\12\26\0\4\12\1\0\3\12\1\203\20\12\26\0"+
    "\4\12\1\0\20\12\1\204\3\12\26\0\4\12\1\0"+
    "\5\12\1\205\16\12\26\0\4\12\1\0\16\12\1\206"+
    "\5\12\26\0\4\12\1\0\1\12\1\207\22\12\26\0"+
    "\4\12\1\0\12\12\1\210\11\12\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\2\11\3\1\1\11"+
    "\16\1\6\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\2\11\3\0\27\1\6\11\1\0\1\11\25\1"+
    "\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return symbol(sym.CLASS);
          }
        case 58: break;
        case 4: 
          { return symbol(sym.LPAR);
          }
        case 59: break;
        case 19: 
          { return symbol(sym.GT);
          }
        case 60: break;
        case 14: 
          { return symbol(sym.SUBOP);
          }
        case 61: break;
        case 37: 
          { return symbol(sym.END);
          }
        case 62: break;
        case 18: 
          { return symbol(sym.LT);
          }
        case 63: break;
        case 6: 
          { return symbol(sym.RPAR);
          }
        case 64: break;
        case 38: 
          { return symbol(sym.TYPE_INT);
          }
        case 65: break;
        case 48: 
          { return symbol(sym.BEGIN);
          }
        case 66: break;
        case 39: 
          { return symbol(sym.NOT);
          }
        case 67: break;
        case 24: 
          { return symbol(sym.OD);
          }
        case 68: break;
        case 35: 
          { return symbol(sym.FLOAT_LITERAL, new Float(yytext()));
          }
        case 69: break;
        case 29: 
          { return symbol(sym.ASSIGN);
          }
        case 70: break;
        case 53: 
          { return symbol(sym.RETURN);
          }
        case 71: break;
        case 5: 
          { return symbol(sym.MULOP);
          }
        case 72: break;
        case 8: 
          { return symbol(sym.INT_LITERAL, new Integer(yytext()));
          }
        case 73: break;
        case 3: 
          { return symbol(sym.DIVOP);
          }
        case 74: break;
        case 7: 
          { return symbol(sym.ID,yytext());
          }
        case 75: break;
        case 33: 
          { return symbol(sym.LOG_AND);
          }
        case 76: break;
        case 27: 
          { return symbol(sym.DO);
          }
        case 77: break;
        case 10: 
          { return symbol(sym.LCURLY);
          }
        case 78: break;
        case 43: 
          { return symbol(sym.ELSE);
          }
        case 79: break;
        case 16: 
          { return symbol(sym.COLON);
          }
        case 80: break;
        case 51: 
          { return symbol(sym.TYPE_FLOAT);
          }
        case 81: break;
        case 49: 
          { return symbol(sym.DEREF);
          }
        case 82: break;
        case 46: 
          { return symbol(sym.THEN);
          }
        case 83: break;
        case 41: 
          { return symbol(sym.VAR);
          }
        case 84: break;
        case 52: 
          { return symbol(sym.WHILE);
          }
        case 85: break;
        case 57: 
          { return symbol(sym.PROCEDURE);
          }
        case 86: break;
        case 55: 
          { return symbol(sym.STRUCT);
          }
        case 87: break;
        case 26: 
          { return symbol(sym.IF);
          }
        case 88: break;
        case 1: 
          { throw new Error("Illegal character '" + yytext() + "' at line " + yyline + ", column " + yycolumn + ".");
          }
        case 89: break;
        case 50: 
          { return symbol(sym.TYPE_BOOL, new Boolean(false));
          }
        case 90: break;
        case 25: 
          { return symbol(sym.IN);
          }
        case 91: break;
        case 17: 
          { return symbol(sym.EQ);
          }
        case 92: break;
        case 22: 
          { throw new Error("Unterminated string at end of line");
          }
        case 93: break;
        case 36: 
          { return symbol(sym.REF);
          }
        case 94: break;
        case 20: 
          { return symbol(sym.SEMI);
          }
        case 95: break;
        case 31: 
          { return symbol(sym.NEQUAL);
          }
        case 96: break;
        case 32: 
          { return symbol(sym.GTEQUAL);
          }
        case 97: break;
        case 13: 
          { return symbol(sym.ADDOP);
          }
        case 98: break;
        case 34: 
          { return symbol(sym.LOG_OR);
          }
        case 99: break;
        case 21: 
          { yybegin(STRING); string.setLength(0);
          }
        case 100: break;
        case 40: 
          { return symbol(sym.NEW);
          }
        case 101: break;
        case 23: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 102: break;
        case 15: 
          { return symbol(sym.EXP);
          }
        case 103: break;
        case 30: 
          { return symbol(sym.LTEQUAL);
          }
        case 104: break;
        case 12: 
          { return symbol(sym.COMMA);
          }
        case 105: break;
        case 45: 
          { return symbol(sym.TYPE_BOOL, new Boolean(true));
          }
        case 106: break;
        case 11: 
          { return symbol(sym.RCURLY);
          }
        case 107: break;
        case 54: 
          { return symbol(sym.TYPE_STRING);
          }
        case 108: break;
        case 44: 
          { return symbol(sym.NULL);
          }
        case 109: break;
        case 9: 
          { return symbol(sym.DOT);
          }
        case 110: break;
        case 28: 
          { return symbol(sym.FI);
          }
        case 111: break;
        case 56: 
          { return symbol(sym.PROGRAM);
          }
        case 112: break;
        case 42: 
          { return symbol(sym.TYPE_BOOL);
          }
        case 113: break;
        case 2: 
          { 
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
