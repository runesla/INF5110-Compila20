
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 11 15:28:00 GMT 2020
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import common.Program;
import syntaxtree.*;
import syntaxtree.decl.*;
import syntaxtree.expr.*;
import syntaxtree.expr.literals.*;
import syntaxtree.stmt.*;
import syntaxtree.types.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 11 15:28:00 GMT 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\004\007\000\002\003" +
    "\003\000\002\017\003\000\002\017\002\000\002\016\003" +
    "\000\002\016\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\006\010\000\002" +
    "\006\006\000\002\010\007\000\002\015\003\000\002\015" +
    "\002\000\002\013\003\000\002\013\005\000\002\007\012" +
    "\000\002\007\014\000\002\007\016\000\002\007\014\000" +
    "\002\014\003\000\002\014\002\000\002\012\003\000\002" +
    "\012\005\000\002\011\005\000\002\021\003\000\002\021" +
    "\004\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\005\000\002" +
    "\032\003\000\002\032\002\000\002\031\003\000\002\031" +
    "\005\000\002\025\005\000\002\025\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\022\006\000\002\023\006\000\002\023\006" +
    "\000\002\024\003\000\002\024\005\000\002\020\003\000" +
    "\002\020\002\000\002\041\003\000\002\041\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\005\000\002\034\005" +
    "\000\002\035\007\000\002\035\011\000\002\036\007\000" +
    "\002\037\004\000\002\037\003\000\002\040\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\006\000\002\002\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\004\005\001\002\000\004\002\251\001" +
    "\002\000\004\061\006\001\002\000\076\005\uffff\006\uffff" +
    "\012\uffff\013\uffff\014\uffff\016\uffff\017\uffff\024\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\054\uffff\001\002\000\004\005\010\001\002\000" +
    "\012\006\ufffd\010\016\025\013\053\017\001\002\000\010" +
    "\006\ufff8\024\ufff8\042\ufff8\001\002\000\010\006\ufff9\024" +
    "\ufff9\042\ufff9\001\002\000\004\061\006\001\002\000\010" +
    "\006\ufffe\024\ufffe\042\237\001\002\000\004\006\236\001" +
    "\002\000\004\061\006\001\002\000\004\061\006\001\002" +
    "\000\010\006\ufffc\024\ufffc\042\ufffc\001\002\000\010\006" +
    "\ufffa\024\ufffa\042\ufffa\001\002\000\006\041\023\054\024" +
    "\001\002\000\016\022\134\055\137\056\131\057\132\060" +
    "\136\061\006\001\002\000\030\020\030\021\040\022\031" +
    "\023\037\026\047\061\006\062\042\063\035\064\036\065" +
    "\026\066\045\001\002\000\044\006\ufff5\024\ufff5\033\065" +
    "\034\067\035\071\036\060\037\074\040\072\042\ufff5\043" +
    "\061\044\064\045\073\046\056\047\066\050\062\051\063" +
    "\052\057\001\002\000\062\006\uffab\012\uffab\013\uffab\014" +
    "\uffab\016\uffab\017\uffab\024\uffab\027\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\001\002\000\062\006\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\017\uffe3\024\uffe3\027\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\004\026\125\001\002\000\062\006" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\024\uffe6" +
    "\027\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000\062\006" +
    "\uffde\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\024\uffde" +
    "\027\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\001\002\000\062\006" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\024\uffdd" +
    "\027\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000\062\006" +
    "\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac\024\uffac" +
    "\027\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\001\002\000\062\006" +
    "\uffae\012\uffae\013\uffae\014\uffae\016\uffae\017\uffae\024\uffae" +
    "\027\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\001\002\000\004\026" +
    "\117\001\002\000\004\061\006\001\002\000\062\006\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\024\uffdf\027" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\062\006\uffad" +
    "\012\uffad\013\uffad\014\uffad\016\uffad\017\uffad\024\uffad\027" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\001\002\000\062\006\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\024\uffe1\027" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\001\002\000\062\006\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2\024\uffe2\027" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\062\006\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\024\uffaa\027" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\001\002\000\062\006\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\024\uffe4\027" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\001\002\000\030\020\030" +
    "\021\040\022\031\023\037\026\047\061\006\062\042\063" +
    "\035\064\036\065\026\066\045\001\002\000\066\006\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\024\uffc7\026" +
    "\051\027\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\001\002" +
    "\000\032\020\030\021\040\022\031\023\037\026\047\027" +
    "\uffda\061\006\062\042\063\035\064\036\065\026\066\045" +
    "\001\002\000\042\027\uffd9\032\070\033\065\034\067\035" +
    "\071\036\060\037\074\040\072\043\061\044\064\045\073" +
    "\046\056\047\066\050\062\051\063\052\057\001\002\000" +
    "\004\027\055\001\002\000\004\027\uffdb\001\002\000\062" +
    "\006\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\024" +
    "\uffb5\027\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\030" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\004" +
    "\061\006\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\062\006\uffce\012\uffce\013\uffce\014" +
    "\uffce\016\uffce\017\uffce\024\uffce\027\uffce\032\uffce\033\065" +
    "\034\067\035\071\036\uffce\037\uffce\040\072\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\001\002\000\046\006\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\016\uffd4\017\uffd4\024\uffd4\027\uffd4\032\uffd4\033\065" +
    "\034\067\035\071\036\060\037\074\040\072\042\uffd4\050" +
    "\uffd4\051\uffd4\001\002\000\062\006\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\024\uffcb\027\uffcb\032\uffcb\033" +
    "\065\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\072\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\001\002\000\062\006\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\016\uffcc\017\uffcc\024\uffcc\027\uffcc\032\uffcc\033" +
    "\065\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\072\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\001\002\000\004\027\uffd8\001\002\000\062" +
    "\006\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\024" +
    "\uffcd\027\uffcd\032\uffcd\033\065\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\072\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\001\002\000\046" +
    "\006\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\024" +
    "\uffd3\027\uffd3\032\uffd3\033\065\034\067\035\071\036\060" +
    "\037\074\040\072\042\uffd3\050\uffd3\051\uffd3\001\002\000" +
    "\064\006\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\024\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6\001" +
    "\002\000\046\006\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\024\uffd5\027\uffd5\032\uffd5\033\065\034\067\035" +
    "\071\036\060\037\074\040\072\042\uffd5\050\uffd5\051\uffd5" +
    "\001\002\000\062\006\uffd6\012\uffd6\013\uffd6\014\uffd6\016" +
    "\uffd6\017\uffd6\024\uffd6\027\uffd6\032\uffd6\033\065\034\067" +
    "\035\071\036\060\037\074\040\072\042\uffd6\043\061\044" +
    "\064\045\073\046\056\047\066\050\062\051\uffd6\052\057" +
    "\001\002\000\062\006\uffd7\012\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\024\uffd7\027\uffd7\032\uffd7\033\065\034\067" +
    "\035\071\036\060\037\074\040\072\042\uffd7\043\061\044" +
    "\064\045\073\046\056\047\066\050\uffd7\051\uffd7\052\057" +
    "\001\002\000\046\006\uffd1\012\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\017\uffd1\024\uffd1\027\uffd1\032\uffd1\033\065\034\067" +
    "\035\071\036\060\037\074\040\072\042\uffd1\050\uffd1\051" +
    "\uffd1\001\002\000\062\006\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\017\uffcf\024\uffcf\027\uffcf\032\uffcf\033\065\034" +
    "\067\035\071\036\uffcf\037\uffcf\040\072\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\001\002\000\046\006\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\uffd0\024\uffd0\027\uffd0\032\uffd0\033\065\034" +
    "\067\035\071\036\060\037\074\040\072\042\uffd0\050\uffd0" +
    "\051\uffd0\001\002\000\046\006\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\016\uffd2\017\uffd2\024\uffd2\027\uffd2\032\uffd2\033\065" +
    "\034\067\035\071\036\060\037\074\040\072\042\uffd2\050" +
    "\uffd2\051\uffd2\001\002\000\040\027\115\033\065\034\067" +
    "\035\071\036\060\037\074\040\072\043\061\044\064\045" +
    "\073\046\056\047\066\050\062\051\063\052\057\001\002" +
    "\000\062\006\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\024\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002" +
    "\000\062\006\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0\017" +
    "\uffe0\024\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\001\002" +
    "\000\030\020\030\021\040\022\031\023\037\026\047\061" +
    "\006\062\042\063\035\064\036\065\026\066\045\001\002" +
    "\000\036\033\065\034\067\035\071\036\060\037\074\040" +
    "\072\043\061\044\064\045\073\046\056\047\066\050\062" +
    "\051\063\052\057\001\002\000\040\027\124\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001" +
    "\002\000\040\027\123\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\064\006\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\024\uffc9\027" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\001\002\000\064" +
    "\006\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8\024" +
    "\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\001\002" +
    "\000\030\020\030\021\040\022\031\023\037\026\047\061" +
    "\006\062\042\063\035\064\036\065\026\066\045\001\002" +
    "\000\040\027\127\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\001\002\000\062\006\uffca\012" +
    "\uffca\013\uffca\014\uffca\016\uffca\017\uffca\024\uffca\027\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\001\002\000\062\006\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\024\uffe5\027\uffe5" +
    "\032\uffe5\033\065\034\067\035\071\036\060\037\074\040" +
    "\072\042\uffe5\043\061\044\064\045\073\046\056\047\066" +
    "\050\uffe5\051\uffe5\052\057\001\002\000\022\005\uffb2\006" +
    "\uffb2\024\uffb2\027\uffb2\031\uffb2\032\uffb2\042\uffb2\054\uffb2" +
    "\001\002\000\022\005\uffb1\006\uffb1\024\uffb1\027\uffb1\031" +
    "\uffb1\032\uffb1\042\uffb1\054\uffb1\001\002\000\012\006\ufff7" +
    "\024\ufff7\042\ufff7\054\143\001\002\000\004\026\140\001" +
    "\002\000\022\005\uffaf\006\uffaf\024\uffaf\027\uffaf\031\uffaf" +
    "\032\uffaf\042\uffaf\054\uffaf\001\002\000\022\005\uffb3\006" +
    "\uffb3\024\uffb3\027\uffb3\031\uffb3\032\uffb3\042\uffb3\054\uffb3" +
    "\001\002\000\022\005\uffb4\006\uffb4\024\uffb4\027\uffb4\031" +
    "\uffb4\032\uffb4\042\uffb4\054\uffb4\001\002\000\016\022\134" +
    "\055\137\056\131\057\132\060\136\061\006\001\002\000" +
    "\004\027\142\001\002\000\022\005\uffb0\006\uffb0\024\uffb0" +
    "\027\uffb0\031\uffb0\032\uffb0\042\uffb0\054\uffb0\001\002\000" +
    "\030\020\030\021\040\022\031\023\037\026\047\061\006" +
    "\062\042\063\035\064\036\065\026\066\045\001\002\000" +
    "\044\006\ufff6\024\ufff6\033\065\034\067\035\071\036\060" +
    "\037\074\040\072\042\ufff6\043\061\044\064\045\073\046" +
    "\056\047\066\050\062\051\063\052\057\001\002\000\004" +
    "\026\146\001\002\000\006\027\uffea\061\006\001\002\000" +
    "\004\041\234\001\002\000\006\027\uffeb\032\232\001\002" +
    "\000\006\027\uffe9\032\uffe9\001\002\000\004\027\153\001" +
    "\002\000\006\005\154\041\155\001\002\000\050\006\uffc4" +
    "\007\167\010\016\011\162\015\173\020\030\021\040\022" +
    "\031\023\037\024\ufffd\025\013\026\047\053\017\061\006" +
    "\062\042\063\035\064\036\065\026\066\045\001\002\000" +
    "\016\022\134\055\137\056\131\057\132\060\136\061\006" +
    "\001\002\000\004\005\157\001\002\000\050\006\uffc4\007" +
    "\167\010\016\011\162\015\173\020\030\021\040\022\031" +
    "\023\037\024\ufffd\025\013\026\047\053\017\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\004" +
    "\006\223\001\002\000\014\006\uffbe\013\uffbe\014\uffbe\017" +
    "\uffbe\042\uffbe\001\002\000\030\020\030\021\040\022\031" +
    "\023\037\026\047\061\006\062\042\063\035\064\036\065" +
    "\026\066\045\001\002\000\014\006\uffc1\013\uffc1\014\uffc1" +
    "\017\uffc1\042\uffc1\001\002\000\004\024\211\001\002\000" +
    "\040\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\054\207\001\002\000\040\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\054\205" +
    "\001\002\000\042\006\uffb6\013\uffb6\014\uffb6\017\uffb6\020" +
    "\030\021\040\022\031\023\037\026\047\042\uffb6\061\006" +
    "\062\042\063\035\064\036\065\026\066\045\001\002\000" +
    "\014\006\uffbf\013\uffbf\014\uffbf\017\uffbf\042\uffbf\001\002" +
    "\000\014\006\uffc5\013\uffc5\014\uffc5\017\uffc5\042\202\001" +
    "\002\000\050\006\uffbd\013\uffbd\014\uffbd\017\uffbd\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffbd\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\001\002\000\030\020\030\021\040\022\031\023" +
    "\037\026\047\061\006\062\042\063\035\064\036\065\026" +
    "\066\045\001\002\000\014\006\uffc0\013\uffc0\014\uffc0\017" +
    "\uffc0\042\uffc0\001\002\000\014\006\uffc3\013\uffc3\014\uffc3" +
    "\017\uffc3\042\uffc3\001\002\000\040\016\177\033\065\034" +
    "\067\035\071\036\060\037\074\040\072\043\061\044\064" +
    "\045\073\046\056\047\066\050\062\051\063\052\057\001" +
    "\002\000\040\007\167\011\162\015\173\017\uffc4\020\030" +
    "\021\040\022\031\023\037\026\047\061\006\062\042\063" +
    "\035\064\036\065\026\066\045\001\002\000\004\017\201" +
    "\001\002\000\014\006\uffb8\013\uffb8\014\uffb8\017\uffb8\042" +
    "\uffb8\001\002\000\036\007\167\011\162\015\173\020\030" +
    "\021\040\022\031\023\037\026\047\061\006\062\042\063" +
    "\035\064\036\065\026\066\045\001\002\000\014\006\uffc2" +
    "\013\uffc2\014\uffc2\017\uffc2\042\uffc2\001\002\000\050\006" +
    "\uffb7\013\uffb7\014\uffb7\017\uffb7\033\065\034\067\035\071" +
    "\036\060\037\074\040\072\042\uffb7\043\061\044\064\045" +
    "\073\046\056\047\066\050\062\051\063\052\057\001\002" +
    "\000\030\020\030\021\040\022\031\023\037\026\047\061" +
    "\006\062\042\063\035\064\036\065\026\066\045\001\002" +
    "\000\050\006\uffbb\013\uffbb\014\uffbb\017\uffbb\033\065\034" +
    "\067\035\071\036\060\037\074\040\072\042\uffbb\043\061" +
    "\044\064\045\073\046\056\047\066\050\062\051\063\052" +
    "\057\001\002\000\030\020\030\021\040\022\031\023\037" +
    "\026\047\061\006\062\042\063\035\064\036\065\026\066" +
    "\045\001\002\000\050\006\uffbc\013\uffbc\014\uffbc\017\uffbc" +
    "\033\065\034\067\035\071\036\060\037\074\040\072\042" +
    "\uffbc\043\061\044\064\045\073\046\056\047\066\050\062" +
    "\051\063\052\057\001\002\000\040\006\uffc4\007\167\011" +
    "\162\015\173\020\030\021\040\022\031\023\037\026\047" +
    "\061\006\062\042\063\035\064\036\065\026\066\045\001" +
    "\002\000\004\006\213\001\002\000\010\006\uffed\024\uffed" +
    "\042\uffed\001\002\000\040\012\215\033\065\034\067\035" +
    "\071\036\060\037\074\040\072\043\061\044\064\045\073" +
    "\046\056\047\066\050\062\051\063\052\057\001\002\000" +
    "\042\007\167\011\162\013\uffc4\014\uffc4\015\173\020\030" +
    "\021\040\022\031\023\037\026\047\061\006\062\042\063" +
    "\035\064\036\065\026\066\045\001\002\000\006\013\220" +
    "\014\217\001\002\000\014\006\uffba\013\uffba\014\uffba\017" +
    "\uffba\042\uffba\001\002\000\040\007\167\011\162\014\uffc4" +
    "\015\173\020\030\021\040\022\031\023\037\026\047\061" +
    "\006\062\042\063\035\064\036\065\026\066\045\001\002" +
    "\000\004\014\222\001\002\000\014\006\uffb9\013\uffb9\014" +
    "\uffb9\017\uffb9\042\uffb9\001\002\000\010\006\uffec\024\uffec" +
    "\042\uffec\001\002\000\004\006\231\001\002\000\004\024" +
    "\226\001\002\000\040\006\uffc4\007\167\011\162\015\173" +
    "\020\030\021\040\022\031\023\037\026\047\061\006\062" +
    "\042\063\035\064\036\065\026\066\045\001\002\000\004" +
    "\006\230\001\002\000\010\006\uffee\024\uffee\042\uffee\001" +
    "\002\000\010\006\uffef\024\uffef\042\uffef\001\002\000\004" +
    "\061\006\001\002\000\006\027\uffe8\032\uffe8\001\002\000" +
    "\016\022\134\055\137\056\131\057\132\060\136\061\006" +
    "\001\002\000\012\027\uffe7\031\uffe7\032\uffe7\042\uffe7\001" +
    "\002\000\004\002\000\001\002\000\010\010\016\025\013" +
    "\053\017\001\002\000\010\006\ufffb\024\ufffb\042\ufffb\001" +
    "\002\000\004\030\242\001\002\000\006\031\ufff2\061\006" +
    "\001\002\000\006\031\ufff3\042\247\001\002\000\006\031" +
    "\ufff1\042\ufff1\001\002\000\004\031\246\001\002\000\010" +
    "\006\ufff4\024\ufff4\042\ufff4\001\002\000\004\061\006\001" +
    "\002\000\006\031\ufff0\042\ufff0\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\004\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\017\006\020\007\010\010\011\016\013\017" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\144\001\001\000\004\003\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\132\003\134\001\001\000\026\003\047\021\024\022\032" +
    "\023\033\024\040\025\031\026\045\027\026\030\043\040" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\047\021\127\022\032\023\033\024" +
    "\040\025\031\026\045\027\026\030\043\040\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\047\021\113\022" +
    "\032\023\033\024\040\025\031\026\045\027\026\030\043" +
    "\040\042\001\001\000\002\001\001\000\032\003\047\021" +
    "\051\022\032\023\033\024\040\025\031\026\045\027\026" +
    "\030\043\031\053\032\052\040\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\047\021\112\022\032\023\033\024\040\025" +
    "\031\026\045\027\026\030\043\040\042\001\001\000\026" +
    "\003\047\021\111\022\032\023\033\024\040\025\031\026" +
    "\045\027\026\030\043\040\042\001\001\000\026\003\047" +
    "\021\110\022\032\023\033\024\040\025\031\026\045\027" +
    "\026\030\043\040\042\001\001\000\026\003\047\021\107" +
    "\022\032\023\033\024\040\025\031\026\045\027\026\030" +
    "\043\040\042\001\001\000\026\003\047\021\106\022\032" +
    "\023\033\024\040\025\031\026\045\027\026\030\043\040" +
    "\042\001\001\000\026\003\047\021\105\022\032\023\033" +
    "\024\040\025\031\026\045\027\026\030\043\040\042\001" +
    "\001\000\026\003\047\021\104\022\032\023\033\024\040" +
    "\025\031\026\045\027\026\030\043\040\042\001\001\000" +
    "\004\003\103\001\001\000\026\003\047\021\102\022\032" +
    "\023\033\024\040\025\031\026\045\027\026\030\043\040" +
    "\042\001\001\000\026\003\047\021\101\022\032\023\033" +
    "\024\040\025\031\026\045\027\026\030\043\040\042\001" +
    "\001\000\030\003\047\021\051\022\032\023\033\024\040" +
    "\025\031\026\045\027\026\030\043\031\100\040\042\001" +
    "\001\000\026\003\047\021\077\022\032\023\033\024\040" +
    "\025\031\026\045\027\026\030\043\040\042\001\001\000" +
    "\026\003\047\021\076\022\032\023\033\024\040\025\031" +
    "\026\045\027\026\030\043\040\042\001\001\000\026\003" +
    "\047\021\075\022\032\023\033\024\040\025\031\026\045" +
    "\027\026\030\043\040\042\001\001\000\026\003\047\021" +
    "\074\022\032\023\033\024\040\025\031\026\045\027\026" +
    "\030\043\040\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\047\021\117\022\032\023\120\024\121\025" +
    "\031\026\045\027\026\030\043\040\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\047\021\117\022\032" +
    "\023\033\024\125\025\031\026\045\027\026\030\043\040" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\140\003\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\047\021\143" +
    "\022\032\023\033\024\040\025\031\026\045\027\026\030" +
    "\043\040\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\146\011\150\012\147\014\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\047\005\017\006" +
    "\020\007\010\010\011\016\013\017\224\020\223\021\117" +
    "\022\032\023\165\024\164\025\031\026\045\027\026\030" +
    "\043\033\174\034\162\035\173\036\167\037\160\040\171" +
    "\041\170\001\001\000\006\002\155\003\134\001\001\000" +
    "\002\001\001\000\060\003\047\005\017\006\020\007\010" +
    "\010\011\016\013\017\163\020\157\021\117\022\032\023" +
    "\165\024\164\025\031\026\045\027\026\030\043\033\174" +
    "\034\162\035\173\036\167\037\160\040\171\041\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\047" +
    "\021\213\022\032\023\033\024\040\025\031\026\045\027" +
    "\026\030\043\040\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\047\021\203\022\032\023\033\024\040\025\031\026\045" +
    "\027\026\030\043\040\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\047\021\175" +
    "\022\032\023\033\024\040\025\031\026\045\027\026\030" +
    "\043\040\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\047\020\177\021\117\022" +
    "\032\023\165\024\164\025\031\026\045\027\026\030\043" +
    "\033\174\034\162\035\173\036\167\037\160\040\171\041" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\047\021\117\022\032\023\165\024\164\025\031\026" +
    "\045\027\026\030\043\033\202\034\162\035\173\036\167" +
    "\037\160\040\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\047\021\205\022\032\023\033\024\040" +
    "\025\031\026\045\027\026\030\043\040\042\001\001\000" +
    "\002\001\001\000\026\003\047\021\207\022\032\023\033" +
    "\024\040\025\031\026\045\027\026\030\043\040\042\001" +
    "\001\000\002\001\001\000\044\003\047\020\211\021\117" +
    "\022\032\023\165\024\164\025\031\026\045\027\026\030" +
    "\043\033\174\034\162\035\173\036\167\037\160\040\171" +
    "\041\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\047\020\215\021\117\022\032" +
    "\023\165\024\164\025\031\026\045\027\026\030\043\033" +
    "\174\034\162\035\173\036\167\037\160\040\171\041\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\047\020\220\021\117\022\032\023\165\024\164\025\031" +
    "\026\045\027\026\030\043\033\174\034\162\035\173\036" +
    "\167\037\160\040\171\041\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\047\020\226\021\117\022\032" +
    "\023\165\024\164\025\031\026\045\027\026\030\043\033" +
    "\174\034\162\035\173\036\167\037\160\040\171\041\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\146\011\232\001\001\000\002\001\001" +
    "\000\006\002\234\003\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\237\006\020\007\010\010\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\146\011\243\013\242\015\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\146\011\247\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal_expr ::= NULL 
            {
              LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_expr ::= BOOL_LITERAL 
            {
              LiteralExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(bl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal_expr ::= STRING_LITERAL 
            {
              LiteralExpr RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal_expr ::= FLOAT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal_expr ::= INT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dataType ::= name 
            {
              DataType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataType(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dataType ::= REF LPAR dataType RPAR 
            {
              DataType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dataType ::= TYPE_STRING 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dataType ::= TYPE_FLOAT 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dataType ::= TYPE_BOOL 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dataType ::= TYPE_INT 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // call_stmt ::= name LPAR opt_expr_list RPAR 
            {
              CallStmt RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> e = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmt(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_stmt ::= RETURN 
            {
              ReturnStmt RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_stmt ::= RETURN expr 
            {
              ReturnStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_stmt ::= WHILE expr DO opt_stmt_list OD 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmt(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_stmt ::= IF expr THEN opt_stmt_list ELSE opt_stmt_list FI 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int osl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int osl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Stmt> osl1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int osl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, osl1, osl2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_stmt ::= IF expr THEN opt_stmt_list FI 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assign_stmt ::= deref_var ASSIGN expr 
            {
              AssignStmt RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(dv, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_stmt ::= var ASSIGN expr 
            {
              AssignStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= call_stmt 
            {
              Stmt RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt cs = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= return_stmt 
            {
              Stmt RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt rs = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= while_stmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= if_stmt 
            {
              Stmt RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt ifs = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ifs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= assign_stmt 
            {
              Stmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt as = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt_list ::= stmt_list SEMI stmt 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt_list ::= stmt 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Stmt> sl = new LinkedList<Stmt>(); sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opt_stmt_list ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = new LinkedList<Stmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opt_stmt_list ::= stmt_list 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var ::= expr DOT name 
            {
              VarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var ::= name 
            {
              VarExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // deref_var ::= DEREF LPAR deref_var RPAR 
            {
              DerefVarExpr RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // deref_var ::= DEREF LPAR var RPAR 
            {
              DerefVarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarExpr e = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVarExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ref_var ::= REF LPAR var RPAR 
            {
              RefVarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarExpr e = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefVarExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arith_op_expr ::= expr EXP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "^", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arith_op_expr ::= expr DIVOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arith_op_expr ::= expr MULOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arith_op_expr ::= expr SUBOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arith_op_expr ::= expr ADDOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rel_op_expr ::= expr NEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<>", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rel_op_expr ::= expr EQ expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rel_op_expr ::= expr LTEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rel_op_expr ::= expr GTEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rel_op_expr ::= expr LT expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rel_op_expr ::= expr GT expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // log_op_expr ::= expr LOG_OR expr 
            {
              LogOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogOpExpr(e1, "||", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // log_op_expr ::= expr LOG_AND expr 
            {
              LogOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogOpExpr(e1, "&&", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_list ::= expr COMMA expr_list 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_list ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Expr> el = new LinkedList<Expr>(); el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opt_expr_list ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expr_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_expr_list ::= expr_list 
            {
              List<Expr> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expr_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= deref_var 
            {
              Expr RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ref_var 
            {
              Expr RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RefVarExpr rv = (RefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= var 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NEW name 
            {
              Expr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewExpr(new DataType(name)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= call_stmt 
            {
              Expr RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt cs = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallExpr(cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= literal_expr 
            {
              Expr RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpr le = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= arith_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithOpExpr e = (ArithOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= rel_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelOpExpr e = (RelOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= log_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogOpExpr e = (LogOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param_decl ::= name COLON dataType 
            {
              ParamDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // proc_params ::= proc_params COMMA param_decl 
            {
              List<ParamDecl> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamDecl> pp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pp.add(pfd); RESULT = pp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_params",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_params ::= param_decl 
            {
              List<ParamDecl> RESULT =null;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ParamDecl> pp = new LinkedList<ParamDecl>(); pp.add(pfd); RESULT = pp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_params",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opt_proc_params ::= 
            {
              List<ParamDecl> RESULT =null;
		 RESULT = new LinkedList<ParamDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_proc_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opt_proc_params ::= proc_params 
            {
              List<ParamDecl> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamDecl> pp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_proc_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proc_decl ::= PROCEDURE name LPAR opt_proc_params RPAR COLON dataType BEGIN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, opp, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proc_decl ::= PROCEDURE name LPAR opt_proc_params RPAR COLON dataType BEGIN opt_decl_list IN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, opp, dl, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc_decl ::= PROCEDURE name LPAR opt_proc_params RPAR BEGIN opt_decl_list IN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, opp, dl, osl);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proc_decl ::= PROCEDURE name LPAR opt_proc_params RPAR BEGIN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, opp, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rec_params ::= rec_params SEMI param_decl 
            {
              List<ParamDecl> RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamDecl> rp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 rp.add(pfd); RESULT = rp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rec_params ::= param_decl 
            {
              List<ParamDecl> RESULT =null;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ParamDecl> pfl = new LinkedList<ParamDecl>(); pfl.add(pfd); RESULT = pfl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opt_rec_params ::= 
            {
              List<ParamDecl> RESULT =null;
		 RESULT = new LinkedList<ParamDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_rec_params",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opt_rec_params ::= rec_params 
            {
              List<ParamDecl> RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamDecl> rp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_rec_params",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rec_decl ::= STRUCT name LCURLY opt_rec_params RCURLY 
            {
              RecDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int orpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ParamDecl> orp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecDecl(name, orp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decl ::= VAR name ASSIGN expr 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= VAR name COLON dataType ASSIGN expr 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= VAR name COLON dataType 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= proc_decl 
            {
              Decl RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcDecl pl = (ProcDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= rec_decl 
            {
              Decl RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecDecl rl = (RecDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= var_decl 
            {
              Decl RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_list ::= decl_list SEMI decl 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_list ::= decl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Decl> dl = new LinkedList<Decl>(); dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_decl_list ::= 
            {
              List<Decl> RESULT =null;
		 RESULT = new LinkedList<Decl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_decl_list ::= decl_list 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= ID 
            {
              Name RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM name BEGIN opt_decl_list END 
            {
              Program RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(name, dl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

