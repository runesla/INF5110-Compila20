
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 07 20:49:57 GMT 2020
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import common.Program;
import syntaxtree.*;
import syntaxtree.decl.*;
import syntaxtree.expr.*;
import syntaxtree.expr.literals.*;
import syntaxtree.stmt.*;
import syntaxtree.types.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 07 20:49:57 GMT 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\004\007\000\002\017" +
    "\003\000\002\017\002\000\002\016\003\000\002\016\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\006\010\000\002\006\006\000\002" +
    "\010\007\000\002\015\003\000\002\015\002\000\002\013" +
    "\003\000\002\013\005\000\002\007\012\000\002\007\014" +
    "\000\002\007\016\000\002\007\014\000\002\014\003\000" +
    "\002\014\002\000\002\012\003\000\002\012\005\000\002" +
    "\011\005\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\004\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\032\003\000\002" +
    "\032\002\000\002\031\003\000\002\031\005\000\002\025" +
    "\005\000\002\025\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\022" +
    "\006\000\002\023\006\000\002\023\006\000\002\024\003" +
    "\000\002\024\005\000\002\024\005\000\002\020\003\000" +
    "\002\020\002\000\002\041\003\000\002\041\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\005\000\002\034\005" +
    "\000\002\035\007\000\002\035\011\000\002\036\007\000" +
    "\002\037\004\000\002\037\003\000\002\040\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\006\000\002\002\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\004\005\001\002\000\004\002\253\001" +
    "\002\000\004\061\006\001\002\000\004\005\007\001\002" +
    "\000\012\006\ufffe\010\015\025\012\053\016\001\002\000" +
    "\010\006\ufff9\024\ufff9\042\ufff9\001\002\000\010\006\ufffa" +
    "\024\ufffa\042\ufffa\001\002\000\004\061\243\001\002\000" +
    "\010\006\uffff\024\uffff\042\241\001\002\000\004\006\240" +
    "\001\002\000\004\061\147\001\002\000\004\061\021\001" +
    "\002\000\010\006\ufffd\024\ufffd\042\ufffd\001\002\000\010" +
    "\006\ufffb\024\ufffb\042\ufffb\001\002\000\006\041\022\054" +
    "\023\001\002\000\016\022\056\055\057\056\053\057\054" +
    "\060\060\061\052\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\044\006\ufff6\024\ufff6\033" +
    "\074\034\075\035\077\036\066\037\103\040\102\042\ufff6" +
    "\043\070\044\073\045\101\046\065\047\076\050\071\051" +
    "\072\052\067\001\002\000\062\006\uffab\012\uffab\013\uffab" +
    "\014\uffab\016\uffab\017\uffab\024\uffab\027\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\001\002\000\062\006\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\017\uffe4\024\uffe4\027\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\001\002\000\030\020\027\021\040\022\030" +
    "\023\037\026\047\061\031\062\043\063\034\064\035\065" +
    "\025\066\045\001\002\000\004\026\140\001\002\000\004" +
    "\026\131\001\002\000\062\006\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\016\uffdf\017\uffdf\024\uffdf\027\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\001\002\000\062\006\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\017\uffe7\024\uffe7\027\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\001\002\000\062\006\uffac\012\uffac\013\uffac\014" +
    "\uffac\016\uffac\017\uffac\024\uffac\027\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\001\002\000\062\006\uffae\012\uffae\013\uffae\014" +
    "\uffae\016\uffae\017\uffae\024\uffae\027\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\001\002\000\062\006\uffde\012\uffde\013\uffde\014" +
    "\uffde\016\uffde\017\uffde\024\uffde\027\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\001\002\000\004\026\123\001\002\000\004\061" +
    "\122\001\002\000\062\006\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\017\uffe2\024\uffe2\027\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\001\002\000\062\006\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\017\uffe0\024\uffe0\027\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\001\002\000\062\006\uffad\012\uffad\013\uffad\014\uffad" +
    "\016\uffad\017\uffad\024\uffad\027\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\001\002\000\062\006\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\016\uffe3\017\uffe3\024\uffe3\027\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\001\002\000\062\006\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\016\uffaa\017\uffaa\024\uffaa\027\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\001\002\000\062\006\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\017\uffe5\024\uffe5\027\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\001\002\000\030\020\027\021\040\022\030\023\037" +
    "\026\047\061\031\062\043\063\034\064\035\065\025\066" +
    "\045\001\002\000\066\006\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\016\uffc8\017\uffc8\024\uffc8\027\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\051\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\054\uffc8\001\002\000\016\022\056\055\057" +
    "\056\053\057\054\060\060\061\052\001\002\000\070\005" +
    "\uffaf\006\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf" +
    "\024\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\054" +
    "\uffaf\001\002\000\070\005\uffb2\006\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\016\uffb2\017\uffb2\024\uffb2\027\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\054\uffb2\001\002\000\070\005\uffb1" +
    "\006\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\024" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1" +
    "\001\002\000\064\006\uffc7\012\uffc7\013\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\024\uffc7\027\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\054\uffc7\001\002\000\004\026\061\001\002\000\070\005" +
    "\uffb4\006\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4" +
    "\024\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054" +
    "\uffb4\001\002\000\070\005\uffb3\006\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\016\uffb3\017\uffb3\024\uffb3\027\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\054\uffb3\001\002\000\016\022\056" +
    "\055\057\056\053\057\054\060\060\061\052\001\002\000" +
    "\004\027\063\001\002\000\070\005\uffb0\006\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\016\uffb0\017\uffb0\024\uffb0\027\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\001\002\000\040" +
    "\027\100\033\074\034\075\035\077\036\066\037\103\040" +
    "\102\043\070\044\073\045\101\046\065\047\076\050\071" +
    "\051\072\052\067\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\004\061\112\001\002\000" +
    "\030\020\027\021\040\022\030\023\037\026\047\061\031" +
    "\062\043\063\034\064\035\065\025\066\045\001\002\000" +
    "\030\020\027\021\040\022\030\023\037\026\047\061\031" +
    "\062\043\063\034\064\035\065\025\066\045\001\002\000" +
    "\030\020\027\021\040\022\030\023\037\026\047\061\031" +
    "\062\043\063\034\064\035\065\025\066\045\001\002\000" +
    "\062\006\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd" +
    "\024\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000" +
    "\030\020\027\021\040\022\030\023\037\026\047\061\031" +
    "\062\043\063\034\064\035\065\025\066\045\001\002\000" +
    "\030\020\027\021\040\022\030\023\037\026\047\061\031" +
    "\062\043\063\034\064\035\065\025\066\045\001\002\000" +
    "\030\020\027\021\040\022\030\023\037\026\047\061\031" +
    "\062\043\063\034\064\035\065\025\066\045\001\002\000" +
    "\062\006\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\024\uffcf\027\uffcf\032\uffcf\033\074\034\075\035\077\036" +
    "\uffcf\037\uffcf\040\102\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\001\002\000" +
    "\062\006\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\024\uffcc\027\uffcc\032\uffcc\033\074\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\102\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002\000" +
    "\046\006\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5" +
    "\024\uffd5\027\uffd5\032\uffd5\033\074\034\075\035\077\036" +
    "\066\037\103\040\102\042\uffd5\050\uffd5\051\uffd5\001\002" +
    "\000\062\006\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\024\uffcd\027\uffcd\032\uffcd\033\074\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\102\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\001\002" +
    "\000\046\006\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\024\uffd4\027\uffd4\032\uffd4\033\074\034\075\035\077" +
    "\036\066\037\103\040\102\042\uffd4\050\uffd4\051\uffd4\001" +
    "\002\000\062\006\uffce\012\uffce\013\uffce\014\uffce\016\uffce" +
    "\017\uffce\024\uffce\027\uffce\032\uffce\033\074\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\102\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\001" +
    "\002\000\064\006\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\024\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054" +
    "\uffc6\001\002\000\046\006\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\024\uffd6\027\uffd6\032\uffd6\033\074\034" +
    "\075\035\077\036\066\037\103\040\102\042\uffd6\050\uffd6" +
    "\051\uffd6\001\002\000\062\006\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\016\uffd7\017\uffd7\024\uffd7\027\uffd7\032\uffd7\033\074" +
    "\034\075\035\077\036\066\037\103\040\102\042\uffd7\043" +
    "\070\044\073\045\101\046\065\047\076\050\071\051\uffd7" +
    "\052\067\001\002\000\062\006\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\016\uffd8\017\uffd8\024\uffd8\027\uffd8\032\uffd8\033\074" +
    "\034\075\035\077\036\066\037\103\040\102\042\uffd8\043" +
    "\070\044\073\045\101\046\065\047\076\050\uffd8\051\uffd8" +
    "\052\067\001\002\000\046\006\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\016\uffd2\017\uffd2\024\uffd2\027\uffd2\032\uffd2\033\074" +
    "\034\075\035\077\036\066\037\103\040\102\042\uffd2\050" +
    "\uffd2\051\uffd2\001\002\000\046\006\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\016\uffd1\017\uffd1\024\uffd1\027\uffd1\032\uffd1\033" +
    "\074\034\075\035\077\036\066\037\103\040\102\042\uffd1" +
    "\050\uffd1\051\uffd1\001\002\000\062\006\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\016\uffd0\017\uffd0\024\uffd0\027\uffd0\032\uffd0" +
    "\033\074\034\075\035\077\036\uffd0\037\uffd0\040\102\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\001\002\000\046\006\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\016\uffd3\017\uffd3\024\uffd3\027\uffd3\032\uffd3" +
    "\033\074\034\075\035\077\036\066\037\103\040\102\042" +
    "\uffd3\050\uffd3\051\uffd3\001\002\000\062\006\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\016\uffe1\017\uffe1\024\uffe1\027\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\001\002\000\030\020\027\021\040" +
    "\022\030\023\037\026\047\061\031\062\043\063\034\064" +
    "\035\065\025\066\045\001\002\000\036\033\074\034\075" +
    "\035\077\036\066\037\103\040\102\043\070\044\073\045" +
    "\101\046\065\047\076\050\071\051\072\052\067\001\002" +
    "\000\040\027\130\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\001\002\000\040\027\127\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\001\002\000\064\006\uffca\012\uffca\013\uffca\014\uffca" +
    "\016\uffca\017\uffca\024\uffca\027\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\054\uffca\001\002\000\064\006\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\016\uffc9\017\uffc9\024\uffc9\027\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\054\uffc9\001\002\000\032\020\027\021\040" +
    "\022\030\023\037\026\047\027\uffdb\061\031\062\043\063" +
    "\034\064\035\065\025\066\045\001\002\000\042\027\uffda" +
    "\032\136\033\074\034\075\035\077\036\066\037\103\040" +
    "\102\043\070\044\073\045\101\046\065\047\076\050\071" +
    "\051\072\052\067\001\002\000\004\027\135\001\002\000" +
    "\004\027\uffdc\001\002\000\062\006\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\016\uffb5\017\uffb5\024\uffb5\027\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\001\002\000\030\020\027\021\040\022\030" +
    "\023\037\026\047\061\031\062\043\063\034\064\035\065" +
    "\025\066\045\001\002\000\004\027\uffd9\001\002\000\030" +
    "\020\027\021\040\022\030\023\037\026\047\061\031\062" +
    "\043\063\034\064\035\065\025\066\045\001\002\000\040" +
    "\027\142\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\062\006\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\017\uffcb\024\uffcb\027\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\001\002\000\062\006\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\016\uffe6\017\uffe6\024\uffe6\027\uffe6\032\uffe6" +
    "\033\074\034\075\035\077\036\066\037\103\040\102\042" +
    "\uffe6\043\070\044\073\045\101\046\065\047\076\050\uffe6" +
    "\051\uffe6\052\067\001\002\000\012\006\ufff8\024\ufff8\042" +
    "\ufff8\054\145\001\002\000\030\020\027\021\040\022\030" +
    "\023\037\026\047\061\031\062\043\063\034\064\035\065" +
    "\025\066\045\001\002\000\044\006\ufff7\024\ufff7\033\074" +
    "\034\075\035\077\036\066\037\103\040\102\042\ufff7\043" +
    "\070\044\073\045\101\046\065\047\076\050\071\051\072" +
    "\052\067\001\002\000\004\026\150\001\002\000\006\027" +
    "\uffeb\061\151\001\002\000\004\041\236\001\002\000\006" +
    "\027\uffec\032\234\001\002\000\006\027\uffea\032\uffea\001" +
    "\002\000\004\027\155\001\002\000\006\005\156\041\157" +
    "\001\002\000\050\006\uffc4\007\171\010\015\011\164\015" +
    "\175\020\027\021\040\022\030\023\037\024\ufffe\025\012" +
    "\026\047\053\016\061\031\062\043\063\034\064\035\065" +
    "\025\066\045\001\002\000\016\022\056\055\057\056\053" +
    "\057\054\060\060\061\052\001\002\000\004\005\161\001" +
    "\002\000\050\006\uffc4\007\171\010\015\011\164\015\175" +
    "\020\027\021\040\022\030\023\037\024\ufffe\025\012\026" +
    "\047\053\016\061\031\062\043\063\034\064\035\065\025" +
    "\066\045\001\002\000\004\006\225\001\002\000\014\006" +
    "\uffbe\013\uffbe\014\uffbe\017\uffbe\042\uffbe\001\002\000\030" +
    "\020\027\021\040\022\030\023\037\026\047\061\031\062" +
    "\043\063\034\064\035\065\025\066\045\001\002\000\014" +
    "\006\uffc1\013\uffc1\014\uffc1\017\uffc1\042\uffc1\001\002\000" +
    "\004\024\213\001\002\000\040\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\054\211\001\002" +
    "\000\040\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\054\207\001\002\000\042\006\uffb6\013" +
    "\uffb6\014\uffb6\017\uffb6\020\027\021\040\022\030\023\037" +
    "\026\047\042\uffb6\061\031\062\043\063\034\064\035\065" +
    "\025\066\045\001\002\000\014\006\uffbf\013\uffbf\014\uffbf" +
    "\017\uffbf\042\uffbf\001\002\000\014\006\uffc5\013\uffc5\014" +
    "\uffc5\017\uffc5\042\204\001\002\000\050\006\uffbd\013\uffbd" +
    "\014\uffbd\017\uffbd\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\042\uffbd\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\030\020" +
    "\027\021\040\022\030\023\037\026\047\061\031\062\043" +
    "\063\034\064\035\065\025\066\045\001\002\000\014\006" +
    "\uffc0\013\uffc0\014\uffc0\017\uffc0\042\uffc0\001\002\000\014" +
    "\006\uffc3\013\uffc3\014\uffc3\017\uffc3\042\uffc3\001\002\000" +
    "\040\016\201\033\074\034\075\035\077\036\066\037\103" +
    "\040\102\043\070\044\073\045\101\046\065\047\076\050" +
    "\071\051\072\052\067\001\002\000\040\007\171\011\164" +
    "\015\175\017\uffc4\020\027\021\040\022\030\023\037\026" +
    "\047\061\031\062\043\063\034\064\035\065\025\066\045" +
    "\001\002\000\004\017\203\001\002\000\014\006\uffb8\013" +
    "\uffb8\014\uffb8\017\uffb8\042\uffb8\001\002\000\036\007\171" +
    "\011\164\015\175\020\027\021\040\022\030\023\037\026" +
    "\047\061\031\062\043\063\034\064\035\065\025\066\045" +
    "\001\002\000\014\006\uffc2\013\uffc2\014\uffc2\017\uffc2\042" +
    "\uffc2\001\002\000\050\006\uffb7\013\uffb7\014\uffb7\017\uffb7" +
    "\033\074\034\075\035\077\036\066\037\103\040\102\042" +
    "\uffb7\043\070\044\073\045\101\046\065\047\076\050\071" +
    "\051\072\052\067\001\002\000\030\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\050\006\uffbb\013\uffbb\014" +
    "\uffbb\017\uffbb\033\074\034\075\035\077\036\066\037\103" +
    "\040\102\042\uffbb\043\070\044\073\045\101\046\065\047" +
    "\076\050\071\051\072\052\067\001\002\000\030\020\027" +
    "\021\040\022\030\023\037\026\047\061\031\062\043\063" +
    "\034\064\035\065\025\066\045\001\002\000\050\006\uffbc" +
    "\013\uffbc\014\uffbc\017\uffbc\033\074\034\075\035\077\036" +
    "\066\037\103\040\102\042\uffbc\043\070\044\073\045\101" +
    "\046\065\047\076\050\071\051\072\052\067\001\002\000" +
    "\040\006\uffc4\007\171\011\164\015\175\020\027\021\040" +
    "\022\030\023\037\026\047\061\031\062\043\063\034\064" +
    "\035\065\025\066\045\001\002\000\004\006\215\001\002" +
    "\000\010\006\uffee\024\uffee\042\uffee\001\002\000\040\012" +
    "\217\033\074\034\075\035\077\036\066\037\103\040\102" +
    "\043\070\044\073\045\101\046\065\047\076\050\071\051" +
    "\072\052\067\001\002\000\042\007\171\011\164\013\uffc4" +
    "\014\uffc4\015\175\020\027\021\040\022\030\023\037\026" +
    "\047\061\031\062\043\063\034\064\035\065\025\066\045" +
    "\001\002\000\006\013\222\014\221\001\002\000\014\006" +
    "\uffba\013\uffba\014\uffba\017\uffba\042\uffba\001\002\000\040" +
    "\007\171\011\164\014\uffc4\015\175\020\027\021\040\022" +
    "\030\023\037\026\047\061\031\062\043\063\034\064\035" +
    "\065\025\066\045\001\002\000\004\014\224\001\002\000" +
    "\014\006\uffb9\013\uffb9\014\uffb9\017\uffb9\042\uffb9\001\002" +
    "\000\010\006\uffed\024\uffed\042\uffed\001\002\000\004\006" +
    "\233\001\002\000\004\024\230\001\002\000\040\006\uffc4" +
    "\007\171\011\164\015\175\020\027\021\040\022\030\023" +
    "\037\026\047\061\031\062\043\063\034\064\035\065\025" +
    "\066\045\001\002\000\004\006\232\001\002\000\010\006" +
    "\uffef\024\uffef\042\uffef\001\002\000\010\006\ufff0\024\ufff0" +
    "\042\ufff0\001\002\000\004\061\151\001\002\000\006\027" +
    "\uffe9\032\uffe9\001\002\000\016\022\056\055\057\056\053" +
    "\057\054\060\060\061\052\001\002\000\012\027\uffe8\031" +
    "\uffe8\032\uffe8\042\uffe8\001\002\000\004\002\000\001\002" +
    "\000\010\010\015\025\012\053\016\001\002\000\010\006" +
    "\ufffc\024\ufffc\042\ufffc\001\002\000\004\030\244\001\002" +
    "\000\006\031\ufff3\061\151\001\002\000\006\031\ufff4\042" +
    "\251\001\002\000\006\031\ufff2\042\ufff2\001\002\000\004" +
    "\031\250\001\002\000\010\006\ufff5\024\ufff5\042\ufff5\001" +
    "\002\000\004\061\151\001\002\000\006\031\ufff1\042\ufff1" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\016\006\017" +
    "\007\007\010\010\016\012\017\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\143\001\001\000\026\003\047\021\023\022\031\023" +
    "\035\024\041\025\032\026\045\027\025\030\043\040\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\047\021\142\022\031\023\035\024\041" +
    "\025\032\026\045\027\025\030\043\040\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\047\021\063" +
    "\022\031\023\035\024\041\025\032\026\045\027\025\030" +
    "\043\040\040\001\001\000\002\001\001\000\004\002\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\047" +
    "\021\120\022\031\023\035\024\041\025\032\026\045\027" +
    "\025\030\043\040\040\001\001\000\026\003\047\021\117" +
    "\022\031\023\035\024\041\025\032\026\045\027\025\030" +
    "\043\040\040\001\001\000\026\003\047\021\116\022\031" +
    "\023\035\024\041\025\032\026\045\027\025\030\043\040" +
    "\040\001\001\000\026\003\047\021\115\022\031\023\035" +
    "\024\041\025\032\026\045\027\025\030\043\040\040\001" +
    "\001\000\026\003\047\021\114\022\031\023\035\024\041" +
    "\025\032\026\045\027\025\030\043\040\040\001\001\000" +
    "\026\003\047\021\113\022\031\023\035\024\041\025\032" +
    "\026\045\027\025\030\043\040\040\001\001\000\026\003" +
    "\047\021\112\022\031\023\035\024\041\025\032\026\045" +
    "\027\025\030\043\040\040\001\001\000\002\001\001\000" +
    "\026\003\047\021\110\022\031\023\035\024\041\025\032" +
    "\026\045\027\025\030\043\040\040\001\001\000\026\003" +
    "\047\021\107\022\031\023\035\024\041\025\032\026\045" +
    "\027\025\030\043\040\040\001\001\000\026\003\047\021" +
    "\106\022\031\023\035\024\041\025\032\026\045\027\025" +
    "\030\043\040\040\001\001\000\002\001\001\000\026\003" +
    "\047\021\105\022\031\023\035\024\041\025\032\026\045" +
    "\027\025\030\043\040\040\001\001\000\026\003\047\021" +
    "\104\022\031\023\035\024\041\025\032\026\045\027\025" +
    "\030\043\040\040\001\001\000\026\003\047\021\103\022" +
    "\031\023\035\024\041\025\032\026\045\027\025\030\043" +
    "\040\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\047\021\123\022\031\023\124\024\125\025\032" +
    "\026\045\027\025\030\043\040\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\047\021\131\022\031\023" +
    "\035\024\041\025\032\026\045\027\025\030\043\031\133" +
    "\032\132\040\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\047" +
    "\021\131\022\031\023\035\024\041\025\032\026\045\027" +
    "\025\030\043\031\136\040\040\001\001\000\002\001\001" +
    "\000\026\003\047\021\123\022\031\023\035\024\140\025" +
    "\032\026\045\027\025\030\043\040\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\047\021\145\022\031\023\035\024\041" +
    "\025\032\026\045\027\025\030\043\040\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\152\012\151" +
    "\014\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\047\005\016\006\017\007\007\010\010\016\012\017" +
    "\226\020\225\021\123\022\031\023\167\024\166\025\032" +
    "\026\045\027\025\030\043\033\176\034\164\035\175\036" +
    "\171\037\162\040\173\041\172\001\001\000\004\002\157" +
    "\001\001\000\002\001\001\000\060\003\047\005\016\006" +
    "\017\007\007\010\010\016\012\017\165\020\161\021\123" +
    "\022\031\023\167\024\166\025\032\026\045\027\025\030" +
    "\043\033\176\034\164\035\175\036\171\037\162\040\173" +
    "\041\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\047\021\215\022\031\023\035\024\041\025\032" +
    "\026\045\027\025\030\043\040\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\047\021\205\022\031\023\035\024\041\025" +
    "\032\026\045\027\025\030\043\040\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\047\021\177\022\031\023\035\024\041\025\032\026\045" +
    "\027\025\030\043\040\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\047\020\201" +
    "\021\123\022\031\023\167\024\166\025\032\026\045\027" +
    "\025\030\043\033\176\034\164\035\175\036\171\037\162" +
    "\040\173\041\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\047\021\123\022\031\023\167\024\166" +
    "\025\032\026\045\027\025\030\043\033\204\034\164\035" +
    "\175\036\171\037\162\040\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\047\021\207\022\031\023" +
    "\035\024\041\025\032\026\045\027\025\030\043\040\040" +
    "\001\001\000\002\001\001\000\026\003\047\021\211\022" +
    "\031\023\035\024\041\025\032\026\045\027\025\030\043" +
    "\040\040\001\001\000\002\001\001\000\044\003\047\020" +
    "\213\021\123\022\031\023\167\024\166\025\032\026\045" +
    "\027\025\030\043\033\176\034\164\035\175\036\171\037" +
    "\162\040\173\041\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\047\020\217\021" +
    "\123\022\031\023\167\024\166\025\032\026\045\027\025" +
    "\030\043\033\176\034\164\035\175\036\171\037\162\040" +
    "\173\041\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\047\020\222\021\123\022\031\023\167\024" +
    "\166\025\032\026\045\027\025\030\043\033\176\034\164" +
    "\035\175\036\171\037\162\040\173\041\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\047\020\230\021" +
    "\123\022\031\023\167\024\166\025\032\026\045\027\025" +
    "\030\043\033\176\034\164\035\175\036\171\037\162\040" +
    "\173\041\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\234\001\001\000\002\001" +
    "\001\000\004\002\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\241\006\017\007\007\010\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\245" +
    "\013\244\015\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\251" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal_expr ::= NULL 
            {
              LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal_expr ::= BOOL_LITERAL 
            {
              LiteralExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(bl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal_expr ::= STRING_LITERAL 
            {
              LiteralExpr RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal_expr ::= FLOAT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal_expr ::= INT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dataType ::= ID 
            {
              DataType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataType(new Name(name)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dataType ::= REF LPAR dataType RPAR 
            {
              DataType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dataType ::= TYPE_STRING 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dataType ::= TYPE_FLOAT 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dataType ::= TYPE_BOOL 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dataType ::= TYPE_INT 
            {
              DataType RESULT =null;
		 RESULT = new DataType(Type.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // call_stmt ::= ID LPAR opt_expr_list RPAR 
            {
              CallStmt RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expr> e = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmt(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_stmt ::= RETURN 
            {
              ReturnStmt RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_stmt ::= RETURN expr 
            {
              ReturnStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_stmt ::= WHILE expr DO opt_stmt_list OD 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmt(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_stmt ::= IF expr THEN opt_stmt_list ELSE opt_stmt_list FI 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int osl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int osl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Stmt> osl1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int osl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, osl1, osl2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_stmt ::= IF expr THEN opt_stmt_list FI 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assign_stmt ::= deref_var ASSIGN expr 
            {
              AssignStmt RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(dv, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_stmt ::= var ASSIGN expr 
            {
              AssignStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= call_stmt 
            {
              Stmt RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt cs = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= return_stmt 
            {
              Stmt RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt rs = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= while_stmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= if_stmt 
            {
              Stmt RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt ifs = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ifs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= assign_stmt 
            {
              Stmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt as = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt_list ::= stmt_list SEMI stmt 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt_list ::= stmt 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Stmt> sl = new LinkedList<Stmt>(); sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opt_stmt_list ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = new LinkedList<Stmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opt_stmt_list ::= stmt_list 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_stmt_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var ::= expr DOT ID 
            {
              VarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var ::= name COLON dataType 
            {
              VarExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var ::= name 
            {
              VarExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name name = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // deref_var ::= DEREF LPAR deref_var RPAR 
            {
              DerefVarExpr RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // deref_var ::= DEREF LPAR var RPAR 
            {
              DerefVarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarExpr e = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVarExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ref_var ::= REF LPAR var RPAR 
            {
              RefVarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarExpr e = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefVarExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arith_op_expr ::= expr EXP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "^", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arith_op_expr ::= expr DIVOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arith_op_expr ::= expr MULOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arith_op_expr ::= expr SUBOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arith_op_expr ::= expr ADDOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rel_op_expr ::= expr NEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<>", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rel_op_expr ::= expr EQ expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rel_op_expr ::= expr LTEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rel_op_expr ::= expr GTEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rel_op_expr ::= expr LT expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rel_op_expr ::= expr GT expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // log_op_expr ::= expr LOG_OR expr 
            {
              LogOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogOpExpr(e1, "||", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // log_op_expr ::= expr LOG_AND expr 
            {
              LogOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogOpExpr(e1, "&&", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_list ::= expr COMMA expr_list 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_list ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Expr> el = new LinkedList<Expr>(); el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_expr_list ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expr_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opt_expr_list ::= expr_list 
            {
              List<Expr> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_expr_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= deref_var 
            {
              Expr RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= ref_var 
            {
              Expr RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RefVarExpr rv = (RefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= var 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NEW ID 
            {
              Expr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewExpr(new DataType(new Name(name))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= call_stmt 
            {
              Expr RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt cs = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallExpr(cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= literal_expr 
            {
              Expr RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpr le = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= arith_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithOpExpr e = (ArithOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= rel_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelOpExpr e = (RelOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= log_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogOpExpr e = (LogOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_decl ::= ID COLON dataType 
            {
              ParamDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proc_params ::= proc_params COMMA param_decl 
            {
              List<ParamDecl> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamDecl> pp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pp.add(pfd); RESULT = pp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_params",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proc_params ::= param_decl 
            {
              List<ParamDecl> RESULT =null;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ParamDecl> pp = new LinkedList<ParamDecl>(); pp.add(pfd); RESULT = pp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_params",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opt_proc_params ::= 
            {
              List<ParamDecl> RESULT =null;
		 RESULT = new LinkedList<ParamDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_proc_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opt_proc_params ::= proc_params 
            {
              List<ParamDecl> RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamDecl> pp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_proc_params",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proc_decl ::= PROCEDURE ID LPAR opt_proc_params RPAR COLON dataType BEGIN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, opp, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proc_decl ::= PROCEDURE ID LPAR opt_proc_params RPAR COLON dataType BEGIN opt_decl_list IN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, opp, dl, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proc_decl ::= PROCEDURE ID LPAR opt_proc_params RPAR BEGIN opt_decl_list IN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, opp, dl, osl);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proc_decl ::= PROCEDURE ID LPAR opt_proc_params RPAR BEGIN opt_stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<ParamDecl> opp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oslleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oslright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> osl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, opp, osl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rec_params ::= rec_params SEMI param_decl 
            {
              List<ParamDecl> RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamDecl> rp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 rp.add(pfd); RESULT = rp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rec_params ::= param_decl 
            {
              List<ParamDecl> RESULT =null;
		int pfdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pfd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ParamDecl> pfl = new LinkedList<ParamDecl>(); pfl.add(pfd); RESULT = pfl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opt_rec_params ::= 
            {
              List<ParamDecl> RESULT =null;
		 RESULT = new LinkedList<ParamDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_rec_params",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opt_rec_params ::= rec_params 
            {
              List<ParamDecl> RESULT =null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ParamDecl> rp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_rec_params",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rec_decl ::= STRUCT ID LCURLY opt_rec_params RCURLY 
            {
              RecDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int orpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ParamDecl> orp = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecDecl(name, orp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= VAR ID ASSIGN expr 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= VAR ID COLON dataType ASSIGN expr 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= VAR ID COLON dataType 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataType t = (DataType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= proc_decl 
            {
              Decl RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcDecl pl = (ProcDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= rec_decl 
            {
              Decl RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecDecl rl = (RecDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= var_decl 
            {
              Decl RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_list ::= decl_list SEMI decl 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= decl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Decl> dl = new LinkedList<Decl>(); dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_decl_list ::= 
            {
              List<Decl> RESULT =null;
		 RESULT = new LinkedList<Decl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_decl_list ::= decl_list 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM ID BEGIN opt_decl_list END 
            {
              Program RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(name, dl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

