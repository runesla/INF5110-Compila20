
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 05 20:13:14 GMT 2020
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import syntaxtree.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 05 20:13:14 GMT 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\007\000\002\012" +
    "\003\000\002\012\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\006\000\002\016\010\000" +
    "\002\016\006\000\002\016\003\000\002\016\005\000\002" +
    "\005\013\000\002\005\015\000\002\010\004\000\002\006" +
    "\010\000\002\011\003\000\002\011\005\000\002\011\002" +
    "\000\002\007\005\000\002\031\004\000\002\031\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\005\000\002\025" +
    "\007\000\002\025\011\000\002\026\007\000\002\027\004" +
    "\000\002\030\006\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\006\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\017\005\000\002" +
    "\017\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\014\006\000\002" +
    "\015\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\004\005\001\002\000\004\002\232\001" +
    "\002\000\004\061\006\001\002\000\004\005\007\001\002" +
    "\000\010\010\013\025\014\053\010\001\002\000\004\061" +
    "\227\001\002\000\016\006\ufffb\010\ufffb\024\ufffb\025\ufffb" +
    "\042\ufffb\053\ufffb\001\002\000\014\006\uffff\010\uffff\024" +
    "\uffff\025\uffff\053\uffff\001\002\000\004\061\047\001\002" +
    "\000\004\061\023\001\002\000\016\006\ufffd\010\ufffd\024" +
    "\ufffd\025\ufffd\042\ufffd\053\ufffd\001\002\000\012\006\021" +
    "\010\013\025\014\053\010\001\002\000\016\006\ufffc\010" +
    "\ufffc\024\ufffc\025\ufffc\042\ufffc\053\ufffc\001\002\000\004" +
    "\042\022\001\002\000\004\002\000\001\002\000\014\006" +
    "\ufffe\010\ufffe\024\ufffe\025\ufffe\053\ufffe\001\002\000\004" +
    "\030\024\001\002\000\010\031\uffef\032\uffef\061\025\001" +
    "\002\000\004\041\034\001\002\000\006\031\031\032\030" +
    "\001\002\000\010\027\ufff1\031\ufff1\032\ufff1\001\002\000" +
    "\004\061\025\001\002\000\004\042\032\001\002\000\016" +
    "\006\ufff2\010\ufff2\024\ufff2\025\ufff2\042\ufff2\053\ufff2\001" +
    "\002\000\010\027\ufff0\031\ufff0\032\ufff0\001\002\000\016" +
    "\022\040\055\043\056\036\057\037\060\042\061\035\001" +
    "\002\000\030\005\uffdc\006\uffdc\010\uffdc\024\uffdc\025\uffdc" +
    "\027\uffdc\031\uffdc\032\uffdc\042\uffdc\053\uffdc\054\uffdc\001" +
    "\002\000\030\005\uffe0\006\uffe0\010\uffe0\024\uffe0\025\uffe0" +
    "\027\uffe0\031\uffe0\032\uffe0\042\uffe0\053\uffe0\054\uffe0\001" +
    "\002\000\030\005\uffde\006\uffde\010\uffde\024\uffde\025\uffde" +
    "\027\uffde\031\uffde\032\uffde\042\uffde\053\uffde\054\uffde\001" +
    "\002\000\004\026\044\001\002\000\010\027\uffee\031\uffee" +
    "\032\uffee\001\002\000\030\005\uffdd\006\uffdd\010\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\031\uffdd\032\uffdd\042\uffdd\053\uffdd" +
    "\054\uffdd\001\002\000\030\005\uffdf\006\uffdf\010\uffdf\024" +
    "\uffdf\025\uffdf\027\uffdf\031\uffdf\032\uffdf\042\uffdf\053\uffdf" +
    "\054\uffdf\001\002\000\016\022\040\055\043\056\036\057" +
    "\037\060\042\061\035\001\002\000\004\027\046\001\002" +
    "\000\030\005\uffdb\006\uffdb\010\uffdb\024\uffdb\025\uffdb\027" +
    "\uffdb\031\uffdb\032\uffdb\042\uffdb\053\uffdb\054\uffdb\001\002" +
    "\000\004\026\050\001\002\000\010\027\uffef\032\uffef\061" +
    "\025\001\002\000\006\027\052\032\030\001\002\000\006" +
    "\005\053\041\054\001\002\000\010\010\013\025\014\053" +
    "\010\001\002\000\016\022\040\055\043\056\036\057\037" +
    "\060\042\061\035\001\002\000\004\005\056\001\002\000" +
    "\010\010\013\025\014\053\010\001\002\000\012\010\013" +
    "\024\223\025\014\053\010\001\002\000\040\007\067\011" +
    "\071\015\065\020\066\021\106\022\070\023\103\026\115" +
    "\053\116\061\073\062\110\063\077\064\101\065\063\066" +
    "\112\001\002\000\004\042\uffe9\001\002\000\036\033\134" +
    "\034\135\035\137\036\126\037\142\040\141\043\130\044" +
    "\133\045\140\046\125\047\136\050\131\051\132\052\127" +
    "\001\002\000\050\012\uffbd\016\uffbd\027\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\054\uffbd\001\002\000\050\012\uffd8\016\uffd8\027\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\054\uffd8\001\002\000\032\020\066\021" +
    "\106\022\070\023\103\026\115\053\116\061\073\062\110" +
    "\063\077\064\101\065\063\066\112\001\002\000\032\020" +
    "\066\021\106\022\070\023\103\026\115\053\116\061\073" +
    "\062\110\063\077\064\101\065\063\066\112\001\002\000" +
    "\032\020\066\021\106\022\070\023\103\026\115\053\116" +
    "\061\073\062\110\063\077\064\101\065\063\066\112\001" +
    "\002\000\004\026\212\001\002\000\032\020\066\021\106" +
    "\022\070\023\103\026\115\053\116\061\073\062\110\063" +
    "\077\064\101\065\063\066\112\001\002\000\040\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\054\201\001\002\000\052\012\ufff7\016\ufff7\026\176\027" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\054\ufff7\001\002\000\042\006\173" +
    "\007\067\011\071\015\065\020\066\021\106\022\070\023" +
    "\103\026\115\053\116\061\073\062\110\063\077\064\101" +
    "\065\063\066\112\001\002\000\050\012\uffda\016\uffda\027" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\054\uffda\001\002\000\050\012\uffd2" +
    "\016\uffd2\027\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\001\002\000" +
    "\050\012\uffbe\016\uffbe\027\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe" +
    "\001\002\000\050\012\uffd1\016\uffd1\027\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\054\uffd1\001\002\000\050\012\uffbf\016\uffbf\027\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\054\uffbf\001\002\000\004\042\uffe8\001" +
    "\002\000\004\026\170\001\002\000\050\012\uffd6\016\uffd6" +
    "\027\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\054\uffd6\001\002\000\004\042" +
    "\uffea\001\002\000\004\061\167\001\002\000\040\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffe7\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\001\002\000\050\012\uffc0\016\uffc0\027\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\054\uffc0\001\002\000\050\012\uffd9\016\uffd9" +
    "\027\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\054\uffd9\001\002\000\050\012" +
    "\uffbc\016\uffbc\027\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc\001\002" +
    "\000\004\042\uffeb\001\002\000\004\042\166\001\002\000" +
    "\032\020\066\021\106\022\070\023\103\026\115\053\116" +
    "\061\073\062\110\063\077\064\101\065\063\066\112\001" +
    "\002\000\004\061\117\001\002\000\006\041\120\054\121" +
    "\001\002\000\016\022\040\055\043\056\036\057\037\060" +
    "\042\061\035\001\002\000\032\020\066\021\106\022\070" +
    "\023\103\026\115\053\116\061\073\062\110\063\077\064" +
    "\101\065\063\066\112\001\002\000\050\012\ufff8\016\ufff8" +
    "\027\ufff8\033\134\034\135\035\137\036\126\037\142\040" +
    "\141\042\ufff8\043\130\044\133\045\140\046\125\047\136" +
    "\050\131\051\132\052\127\054\ufff8\001\002\000\050\012" +
    "\uffd3\016\uffd3\027\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\001\002" +
    "\000\050\012\uffd5\016\uffd5\027\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\054" +
    "\uffd5\001\002\000\032\020\066\021\106\022\070\023\103" +
    "\026\115\053\116\061\073\062\110\063\077\064\101\065" +
    "\063\066\112\001\002\000\032\020\066\021\106\022\070" +
    "\023\103\026\115\053\116\061\073\062\110\063\077\064" +
    "\101\065\063\066\112\001\002\000\032\020\066\021\106" +
    "\022\070\023\103\026\115\053\116\061\073\062\110\063" +
    "\077\064\101\065\063\066\112\001\002\000\032\020\066" +
    "\021\106\022\070\023\103\026\115\053\116\061\073\062" +
    "\110\063\077\064\101\065\063\066\112\001\002\000\032" +
    "\020\066\021\106\022\070\023\103\026\115\053\116\061" +
    "\073\062\110\063\077\064\101\065\063\066\112\001\002" +
    "\000\032\020\066\021\106\022\070\023\103\026\115\053" +
    "\116\061\073\062\110\063\077\064\101\065\063\066\112" +
    "\001\002\000\032\020\066\021\106\022\070\023\103\026" +
    "\115\053\116\061\073\062\110\063\077\064\101\065\063" +
    "\066\112\001\002\000\004\061\151\001\002\000\032\020" +
    "\066\021\106\022\070\023\103\026\115\053\116\061\073" +
    "\062\110\063\077\064\101\065\063\066\112\001\002\000" +
    "\032\020\066\021\106\022\070\023\103\026\115\053\116" +
    "\061\073\062\110\063\077\064\101\065\063\066\112\001" +
    "\002\000\032\020\066\021\106\022\070\023\103\026\115" +
    "\053\116\061\073\062\110\063\077\064\101\065\063\066" +
    "\112\001\002\000\032\020\066\021\106\022\070\023\103" +
    "\026\115\053\116\061\073\062\110\063\077\064\101\065" +
    "\063\066\112\001\002\000\032\020\066\021\106\022\070" +
    "\023\103\026\115\053\116\061\073\062\110\063\077\064" +
    "\101\065\063\066\112\001\002\000\032\020\066\021\106" +
    "\022\070\023\103\026\115\053\116\061\073\062\110\063" +
    "\077\064\101\065\063\066\112\001\002\000\050\012\uffc6" +
    "\016\uffc6\027\uffc6\033\134\034\135\035\137\036\uffc6\037" +
    "\uffc6\040\141\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6\001\002\000" +
    "\050\012\uffc3\016\uffc3\027\uffc3\033\134\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\141\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3" +
    "\001\002\000\034\012\uffcc\016\uffcc\027\uffcc\033\134\034" +
    "\135\035\137\036\126\037\142\040\141\042\uffcc\050\uffcc" +
    "\051\uffcc\054\uffcc\001\002\000\050\012\uffc4\016\uffc4\027" +
    "\uffc4\033\134\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\141" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\001\002\000\034\012\uffcb" +
    "\016\uffcb\027\uffcb\033\134\034\135\035\137\036\126\037" +
    "\142\040\141\042\uffcb\050\uffcb\051\uffcb\054\uffcb\001\002" +
    "\000\050\012\uffc5\016\uffc5\027\uffc5\033\134\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\141\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054" +
    "\uffc5\001\002\000\050\012\ufff6\016\ufff6\027\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\054\ufff6\001\002\000\034\012\uffcd\016\uffcd\027" +
    "\uffcd\033\134\034\135\035\137\036\126\037\142\040\141" +
    "\042\uffcd\050\uffcd\051\uffcd\054\uffcd\001\002\000\050\012" +
    "\uffce\016\uffce\027\uffce\033\134\034\135\035\137\036\126" +
    "\037\142\040\141\042\uffce\043\130\044\133\045\140\046" +
    "\125\047\136\050\131\051\uffce\052\127\054\uffce\001\002" +
    "\000\050\012\uffcf\016\uffcf\027\uffcf\033\134\034\135\035" +
    "\137\036\126\037\142\040\141\042\uffcf\043\130\044\133" +
    "\045\140\046\125\047\136\050\uffcf\051\uffcf\052\127\054" +
    "\uffcf\001\002\000\034\012\uffc9\016\uffc9\027\uffc9\033\134" +
    "\034\135\035\137\036\126\037\142\040\141\042\uffc9\050" +
    "\uffc9\051\uffc9\054\uffc9\001\002\000\034\012\uffc8\016\uffc8" +
    "\027\uffc8\033\134\034\135\035\137\036\126\037\142\040" +
    "\141\042\uffc8\050\uffc8\051\uffc8\054\uffc8\001\002\000\050" +
    "\012\uffc7\016\uffc7\027\uffc7\033\134\034\135\035\137\036" +
    "\uffc7\037\uffc7\040\141\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\001" +
    "\002\000\034\012\uffca\016\uffca\027\uffca\033\134\034\135" +
    "\035\137\036\126\037\142\040\141\042\uffca\050\uffca\051" +
    "\uffca\054\uffca\001\002\000\004\054\162\001\002\000\032" +
    "\020\066\021\106\022\070\023\103\026\115\053\116\061" +
    "\073\062\110\063\077\064\101\065\063\066\112\001\002" +
    "\000\050\012\ufff9\016\ufff9\027\ufff9\033\134\034\135\035" +
    "\137\036\126\037\142\040\141\042\ufff9\043\130\044\133" +
    "\045\140\046\125\047\136\050\131\051\132\052\127\054" +
    "\ufff9\001\002\000\040\027\165\033\134\034\135\035\137" +
    "\036\126\037\142\040\141\043\130\044\133\045\140\046" +
    "\125\047\136\050\131\051\132\052\127\001\002\000\050" +
    "\012\uffd0\016\uffd0\027\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0\001" +
    "\002\000\050\006\uffed\007\uffed\011\uffed\013\uffed\014\uffed" +
    "\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\026" +
    "\uffed\053\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\001\002\000\050\012\uffd4\016\uffd4\027\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\054\uffd4\001\002\000\032\020\066\021\106" +
    "\022\070\023\103\026\115\053\116\061\073\062\110\063" +
    "\077\064\101\065\063\066\112\001\002\000\040\027\172" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\001\002\000\050\012\uffc1\016\uffc1\027\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\001\002\000\016\006\ufff4\010\ufff4" +
    "\024\ufff4\025\ufff4\042\ufff4\053\ufff4\001\002\000\004\042" +
    "\175\001\002\000\050\006\uffec\007\uffec\011\uffec\013\uffec" +
    "\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\026\uffec\053\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\001\002\000\032\020\066\021\106\022" +
    "\070\023\103\026\115\053\116\061\073\062\110\063\077" +
    "\064\101\065\063\066\112\001\002\000\040\027\200\033" +
    "\134\034\135\035\137\036\126\037\142\040\141\043\130" +
    "\044\133\045\140\046\125\047\136\050\131\051\132\052" +
    "\127\001\002\000\050\012\uffe1\016\uffe1\027\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\054\uffe1\001\002\000\032\020\066\021\106\022" +
    "\070\023\103\026\115\053\116\061\073\062\110\063\077" +
    "\064\101\065\063\066\112\001\002\000\040\033\134\034" +
    "\135\035\137\036\126\037\142\040\141\042\uffe6\043\130" +
    "\044\133\045\140\046\125\047\136\050\131\051\132\052" +
    "\127\001\002\000\040\012\204\033\134\034\135\035\137" +
    "\036\126\037\142\040\141\043\130\044\133\045\140\046" +
    "\125\047\136\050\131\051\132\052\127\001\002\000\040" +
    "\007\067\011\071\015\065\020\066\021\106\022\070\023" +
    "\103\026\115\053\116\061\073\062\110\063\077\064\101" +
    "\065\063\066\112\001\002\000\044\007\067\011\071\013" +
    "\206\014\207\015\065\020\066\021\106\022\070\023\103" +
    "\026\115\053\116\061\073\062\110\063\077\064\101\065" +
    "\063\066\112\001\002\000\040\007\067\011\071\015\065" +
    "\020\066\021\106\022\070\023\103\026\115\053\116\061" +
    "\073\062\110\063\077\064\101\065\063\066\112\001\002" +
    "\000\004\042\uffe5\001\002\000\042\007\067\011\071\014" +
    "\211\015\065\020\066\021\106\022\070\023\103\026\115" +
    "\053\116\061\073\062\110\063\077\064\101\065\063\066" +
    "\112\001\002\000\004\042\uffe4\001\002\000\032\020\066" +
    "\021\106\022\070\023\103\026\115\053\116\061\073\062" +
    "\110\063\077\064\101\065\063\066\112\001\002\000\040" +
    "\027\214\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\001\002\000\050\012\uffc2\016\uffc2\027" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\054\uffc2\001\002\000\040\033\134" +
    "\034\135\035\137\036\126\037\142\040\141\042\uffe2\043" +
    "\130\044\133\045\140\046\125\047\136\050\131\051\132" +
    "\052\127\001\002\000\050\012\uffd7\016\uffd7\027\uffd7\033" +
    "\134\034\135\035\137\036\126\037\142\040\141\042\uffd7" +
    "\043\130\044\133\045\140\046\125\047\136\050\uffd7\051" +
    "\uffd7\052\127\054\uffd7\001\002\000\040\016\220\033\134" +
    "\034\135\035\137\036\126\037\142\040\141\043\130\044" +
    "\133\045\140\046\125\047\136\050\131\051\132\052\127" +
    "\001\002\000\040\007\067\011\071\015\065\020\066\021" +
    "\106\022\070\023\103\026\115\053\116\061\073\062\110" +
    "\063\077\064\101\065\063\066\112\001\002\000\042\007" +
    "\067\011\071\015\065\017\222\020\066\021\106\022\070" +
    "\023\103\026\115\053\116\061\073\062\110\063\077\064" +
    "\101\065\063\066\112\001\002\000\004\042\uffe3\001\002" +
    "\000\040\007\ufff3\011\ufff3\015\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\026\ufff3\053\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\001\002\000\040\007\067\011" +
    "\071\015\065\020\066\021\106\022\070\023\103\026\115" +
    "\053\116\061\073\062\110\063\077\064\101\065\063\066" +
    "\112\001\002\000\042\006\226\007\067\011\071\015\065" +
    "\020\066\021\106\022\070\023\103\026\115\053\116\061" +
    "\073\062\110\063\077\064\101\065\063\066\112\001\002" +
    "\000\016\006\ufff5\010\ufff5\024\ufff5\025\ufff5\042\ufff5\053" +
    "\ufff5\001\002\000\004\041\230\001\002\000\016\022\040" +
    "\055\043\056\036\057\037\060\042\061\035\001\002\000" +
    "\016\006\ufffa\010\ufffa\024\ufffa\025\ufffa\042\ufffa\053\ufffa" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\011\004\014" +
    "\005\016\006\010\012\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\017\004\014\005" +
    "\016\006\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\026\011\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\026\011\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\011\004\014\005\016\006\010\010\223" +
    "\012\056\001\001\000\004\032\054\001\001\000\002\001" +
    "\001\000\016\003\011\004\014\005\016\006\010\010\057" +
    "\012\056\001\001\000\012\003\017\004\014\005\016\006" +
    "\010\001\001\000\040\013\061\014\075\015\077\016\071" +
    "\017\074\020\110\021\063\022\103\023\113\024\112\025" +
    "\104\026\060\027\101\030\106\031\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\013\216\014\075\015\077\016\122\017\074" +
    "\020\110\021\063\022\103\030\123\001\001\000\024\013" +
    "\215\014\075\015\077\016\122\017\074\020\110\021\063" +
    "\022\103\030\123\001\001\000\024\013\214\014\075\015" +
    "\077\016\122\017\074\020\110\021\063\022\103\030\123" +
    "\001\001\000\002\001\001\000\024\013\202\014\075\015" +
    "\077\016\122\017\074\020\110\021\063\022\103\030\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\013" +
    "\061\014\075\015\077\016\071\017\074\020\110\021\063" +
    "\022\103\023\173\024\112\025\104\026\060\027\101\030" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\013\163\014\075\015\077\016\122\017" +
    "\074\020\110\021\063\022\103\030\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\160\001\001\000" +
    "\024\013\121\014\075\015\077\016\122\017\074\020\110" +
    "\021\063\022\103\030\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\013\157\014\075" +
    "\015\077\016\122\017\074\020\110\021\063\022\103\030" +
    "\123\001\001\000\024\013\156\014\075\015\077\016\122" +
    "\017\074\020\110\021\063\022\103\030\123\001\001\000" +
    "\024\013\155\014\075\015\077\016\122\017\074\020\110" +
    "\021\063\022\103\030\123\001\001\000\024\013\154\014" +
    "\075\015\077\016\122\017\074\020\110\021\063\022\103" +
    "\030\123\001\001\000\024\013\153\014\075\015\077\016" +
    "\122\017\074\020\110\021\063\022\103\030\123\001\001" +
    "\000\024\013\152\014\075\015\077\016\122\017\074\020" +
    "\110\021\063\022\103\030\123\001\001\000\024\013\151" +
    "\014\075\015\077\016\122\017\074\020\110\021\063\022" +
    "\103\030\123\001\001\000\002\001\001\000\024\013\147" +
    "\014\075\015\077\016\122\017\074\020\110\021\063\022" +
    "\103\030\123\001\001\000\024\013\146\014\075\015\077" +
    "\016\122\017\074\020\110\021\063\022\103\030\123\001" +
    "\001\000\024\013\145\014\075\015\077\016\122\017\074" +
    "\020\110\021\063\022\103\030\123\001\001\000\024\013" +
    "\144\014\075\015\077\016\122\017\074\020\110\021\063" +
    "\022\103\030\123\001\001\000\024\013\143\014\075\015" +
    "\077\016\122\017\074\020\110\021\063\022\103\030\123" +
    "\001\001\000\024\013\142\014\075\015\077\016\122\017" +
    "\074\020\110\021\063\022\103\030\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\162\014\075\015" +
    "\077\016\122\017\074\020\110\021\063\022\103\030\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\061" +
    "\014\075\015\077\016\170\017\074\020\110\021\063\022" +
    "\103\030\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\176\014\075\015\077\016\122\017\074\020\110" +
    "\021\063\022\103\030\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\013\201\014\075\015\077\016\122" +
    "\017\074\020\110\021\063\022\103\030\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\013\061\014\075" +
    "\015\077\016\071\017\074\020\110\021\063\022\103\023" +
    "\113\024\112\025\104\026\060\027\101\030\106\031\204" +
    "\001\001\000\036\013\061\014\075\015\077\016\071\017" +
    "\074\020\110\021\063\022\103\023\173\024\112\025\104" +
    "\026\060\027\101\030\106\001\001\000\040\013\061\014" +
    "\075\015\077\016\071\017\074\020\110\021\063\022\103" +
    "\023\113\024\112\025\104\026\060\027\101\030\106\031" +
    "\207\001\001\000\002\001\001\000\036\013\061\014\075" +
    "\015\077\016\071\017\074\020\110\021\063\022\103\023" +
    "\173\024\112\025\104\026\060\027\101\030\106\001\001" +
    "\000\002\001\001\000\024\013\061\014\075\015\077\016" +
    "\212\017\074\020\110\021\063\022\103\030\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\013\061\014\075" +
    "\015\077\016\071\017\074\020\110\021\063\022\103\023" +
    "\113\024\112\025\104\026\060\027\101\030\106\031\220" +
    "\001\001\000\036\013\061\014\075\015\077\016\071\017" +
    "\074\020\110\021\063\022\103\023\173\024\112\025\104" +
    "\026\060\027\101\030\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\013\061\014\075\015\077\016\071" +
    "\017\074\020\110\021\063\022\103\023\113\024\112\025" +
    "\104\026\060\027\101\030\106\031\224\001\001\000\036" +
    "\013\061\014\075\015\077\016\071\017\074\020\110\021" +
    "\063\022\103\023\173\024\112\025\104\026\060\027\101" +
    "\030\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\230\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= NULL 
            {
              LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= BOOL_LITERAL 
            {
              LiteralExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(bl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= STRING_LITERAL 
            {
              LiteralExpr RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= INT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= FLOAT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // deref_var ::= DEREF LPAR var_expr RPAR 
            {
              DerefVarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarExpr e = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefVarExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deref_var",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ref_var ::= REF LPAR var_expr RPAR 
            {
              RefVarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarExpr e = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefVarExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arith_op_expr ::= expr EXP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "^", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arith_op_expr ::= expr DIVOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arith_op_expr ::= expr MULOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arith_op_expr ::= expr SUBOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arith_op_expr ::= expr ADDOP expr 
            {
              ArithOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithOpExpr(e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_op_expr ::= expr NEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<>", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rel_op_expr ::= expr EQ expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rel_op_expr ::= expr LTEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rel_op_expr ::= expr GTEQUAL expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rel_op_expr ::= expr LT expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rel_op_expr ::= expr GT expr 
            {
              RelOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RelOpExpr(e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // log_op_expr ::= expr LOG_OR expr 
            {
              LogOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogOpExpr(e1, "||", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // log_op_expr ::= expr LOG_AND expr 
            {
              LogOpExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogOpExpr(e1, "&&", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("log_op_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= LPAR expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= deref_var 
            {
              Expr RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DerefVarExpr dv = (DerefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= ref_var 
            {
              Expr RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RefVarExpr rv = (RefVarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= var_expr 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NEW ID 
            {
              Expr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NewExpr(new Type(name)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= call_stmt 
            {
              Expr RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt cs = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallExpr(cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= literal 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpr l = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= arith_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithOpExpr e = (ArithOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= rel_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelOpExpr e = (RelOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= log_op_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogOpExpr e = (LogOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= REF LPAR type RPAR 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RefType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= TYPE_BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= TYPE_STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= TYPE_INT 
            {
              Type RESULT =null;
		 RESULT = new Type("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= TYPE_FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // call_stmt ::= ID LPAR expr RPAR 
            {
              CallStmt RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmt(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_stmt ::= RETURN expr 
            {
              ReturnStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while_stmt ::= WHILE expr DO stmt_list OD 
            {
              WhileStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmt(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_stmt ::= IF expr THEN stmt_list ELSE stmt_list FI 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Stmt> sl1 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl2 = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, sl1, sl2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_stmt ::= IF expr THEN stmt_list FI 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign_stmt ::= var_expr ASSIGN expr 
            {
              AssignStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(v, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= call_stmt 
            {
              Stmt RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt cs = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= return_stmt 
            {
              Stmt RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt rs = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= while_stmt 
            {
              Stmt RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt ws = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= if_stmt 
            {
              Stmt RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt is = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= assign_stmt 
            {
              Stmt RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt as = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_list ::= stmt_list stmt SEMI 
            {
              List<Stmt> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_list ::= stmt SEMI 
            {
              List<Stmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 List<Stmt> l = new LinkedList<Stmt>(); l.add(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_decl ::= ID COLON type 
            {
              ParamDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param_list ::= 
            {
              List<ParamDecl> RESULT =null;
		 RESULT = new LinkedList<ParamDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_list ::= param_list COMMA param_decl 
            {
              List<ParamDecl> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamDecl> pl = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pl.add(pd); RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_list ::= param_decl 
            {
              List<ParamDecl> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDecl pd = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<ParamDecl> l = new LinkedList<ParamDecl>(); l.add(pd); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rec_decl ::= STRUCT ID LCURLY param_list RCURLY SEMI 
            {
              RecDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParamDecl> pl = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RecDecl(name, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rec_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_decl_list ::= decl_list IN 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_decl ::= PROCEDURE ID LPAR param_list RPAR COLON type BEGIN proc_decl_list stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		List<ParamDecl> pl = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, t, pl, dl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_decl ::= PROCEDURE ID LPAR param_list RPAR BEGIN proc_decl_list stmt_list END 
            {
              ProcDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<ParamDecl> pl = (List<ParamDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProcDecl(name, pl, dl, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_expr ::= expr DOT ID 
            {
              VarExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_expr ::= ID 
            {
              VarExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_expr ::= VAR ID ASSIGN expr 
            {
              VarExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_expr ::= VAR ID COLON type ASSIGN expr 
            {
              VarExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExpr(name, t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decl ::= VAR ID COLON type 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(name, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= rec_decl 
            {
              Decl RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecDecl rl = (RecDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= proc_decl 
            {
              Decl RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcDecl pl = (ProcDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= var_decl 
            {
              Decl RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl_list decl SEMI 
            {
              List<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 dl.add(d); RESULT = dl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Decl> l = new LinkedList<Decl>(); l.add(d); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM ID BEGIN decl_list END 
            {
              Program RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Decl> dl = (List<Decl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(name, dl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

